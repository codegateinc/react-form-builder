{"version":3,"file":"react-form-builder.esm.js","sources":["../src/components/Input.tsx","../src/components/Checkbox.tsx","../src/components/Picker.tsx","../src/types/Form.ts","../src/stores/formStore/formStore.ts","../src/stores/configStore/configStore.ts","../src/stores/index.ts","../src/hooks/useValidate.ts","../src/hooks/useBlur.ts","../src/hooks/useChange.ts","../src/hooks/useEvents.ts","../src/utils/stateUtils.ts","../src/utils/renderHelpers.tsx","../src/hooks/useForm.ts","../src/Form.tsx","../src/FormProvider.tsx"],"sourcesContent":["import React from 'react'\nimport { InputProps } from '../types'\n\n// @ts-ignore\nexport const Input: React.FunctionComponent<InputProps> = ({ component }) => component()\n","import React from 'react'\nimport { CheckBoxProps } from '../types'\n\n// @ts-ignore\nexport const CheckBox: React.FunctionComponent<CheckBoxProps> = ({ component }) => component()\n","import React from 'react'\nimport { PickerProps } from '../types'\n\n// @ts-ignore\nexport const Picker: React.FunctionComponent<PickerProps> = ({ component }) => component()\n","import { FormState } from './FormState'\nimport { KeyValuePair } from './common'\n\nexport enum FormFieldType {\n    Input = 0,\n    Picker = 1,\n    CheckBox = 2\n}\n\ntype ValidationValue = string | number | boolean | Array<FormOption>\n\nexport type FormValidationRule = {\n    errorMessage: string,\n    validationFunction(value: ValidationValue, form: FormState): boolean\n}\n\nexport type FormOptionValue = number | string\n\nexport type FormOption = {\n    value: FormOptionValue,\n    label: string,\n    isSelected?: boolean\n}\n\nexport type FieldConfig = {\n    value?: string | number | boolean,\n    type: FormFieldType,\n    isRequired?: boolean,\n    validationRules?: Array<FormValidationRule>,\n    options?: Array<FormOption>,\n    disabled?: boolean,\n    liveParser?(value: ValidationValue): ValidationValue,\n    forceLiveValidate?: boolean\n}\n\nexport type FormConfig = KeyValuePair<FieldConfig>\n// tslint:disable-next-line:no-any\nexport type OnSuccess = (form: any) => void\nexport type OnError = (errors: Array<KeyValuePair>) => void\nexport type FormProps = {\n    formName: string\n}\nexport type OnUpdate = (form: any) => void\n\nexport interface UseFormProps extends FormProps {\n    formConfig: FormConfig,\n    onSuccess?: OnSuccess,\n    onError?: OnError,\n    onUpdate?: OnUpdate\n}\n","import { useEffect, useState } from 'react'\nimport { G } from '@codegateinc/g-utils'\nimport { FieldConfig, FormFieldType, FormOption, FormPickerState, FormState, SubscribeOnChange } from '../../types'\n\nexport type FormStoreState = {\n    [key: string]: FormState\n}\n\ntype OnChange = {\n    [key: string]: SubscribeOnChange\n}\n\ntype FormStoreOnChange = {\n    [key: string]: OnChange\n}\n\nexport const formStore = () => {\n    const [ formState, setFormState ] = useState<FormStoreState>({})\n    const [ onChangeForm, setOnChangeForm ] = useState<FormStoreOnChange>({})\n\n    return {\n        actions: {\n            setFormState: (key: string, state: FormState) => setFormState(prevState => ({\n                ...prevState,\n                [key]: state\n            })),\n            setFormValue: (formKey: string, key: string, value: string | boolean, callback?: (state: FormState) => void) => {\n                if (!formState[formKey]) {\n                    return\n                }\n\n                const newState = {\n                    ...formState,\n                    [formKey]: {\n                        ...formState[formKey],\n                        [key]: {\n                            ...formState[formKey][key],\n                            value\n                        }\n                    }\n                }\n\n                setFormState(prevState => ({\n                    ...prevState,\n                    [formKey]: {\n                        ...prevState[formKey],\n                        [key]: {\n                            ...prevState[formKey][key],\n                            value\n                        }\n                    }\n                }))\n\n                G.ifDefined(callback, fn => fn(newState[formKey]))\n\n                if (onChangeForm[formKey] && onChangeForm[formKey][key]) {\n                    onChangeForm[formKey][key](value)\n                }\n            },\n            setFormError: (formKey: string, key: string, errorMessage?: string) => formState[formKey] && setFormState(prevState => ({\n                ...prevState,\n                [formKey]: {\n                    ...prevState[formKey],\n                    [key]: {\n                        ...prevState[formKey][key],\n                        errorMessage\n                    }\n                }\n            })),\n            setFormPristine: (formKey: string, key: string, isPristine: boolean) => formState[formKey] && setFormState(prevState => ({\n                ...prevState,\n                [formKey]: {\n                    ...prevState[formKey],\n                    [key]: {\n                        ...prevState[formKey][key],\n                        isPristine\n                    }\n                }\n            })),\n            setFormOptions: (\n                formKey: string,\n                key: string,\n                newOptions: Array<FormOption>,\n                callback?: (state: FormState) => void\n            ) => {\n                if (!formState[formKey]) {\n                    return\n                }\n\n                const newState = () => {\n                    const options = newOptions\n                        .map(option => option.value)\n                    const changedOptions = (formState[formKey][key] as FormPickerState).options\n                        .map(option => ({\n                            ...option,\n                            isSelected: options.includes(option.value)\n                        }))\n\n                    return {\n                        ...formState,\n                        [formKey]: {\n                            ...formState[formKey],\n                            [key]: {\n                                ...formState[formKey][key],\n                                options: changedOptions\n                            }\n                        }\n                    }\n                }\n\n                setFormState(prevState => {\n                    const options = newOptions\n                        .map(option => option.value)\n                    const changedOptions = (prevState[formKey][key] as FormPickerState).options\n                        .map(option => ({\n                            ...option,\n                            isSelected: options.includes(option.value)\n                        }))\n\n                    if (onChangeForm[formKey] && onChangeForm[formKey][key]) {\n                        onChangeForm[formKey][key](changedOptions)\n                    }\n\n                    return {\n                        ...prevState,\n                        [formKey]: {\n                            ...prevState[formKey],\n                            [key]: {\n                                ...prevState[formKey][key],\n                                options: changedOptions\n                            }\n                        }\n                    }\n                })\n                G.ifDefined(callback, fn => fn(newState()[formKey]))\n            },\n            setFormField: (formKey: string, key: string, field: Omit<FieldConfig, 'type'>) => {\n                if (formState[formKey] && formState[formKey][key]) {\n                    setFormState(prevState => ({\n                        ...prevState,\n                        [formKey]: {\n                            ...prevState[formKey],\n                            [key]: {\n                                type: formState[formKey][key].type,\n                                ...formState[formKey][key],\n                                ...field,\n                                options: field.options || (formState[formKey][key].type === FormFieldType.Picker\n                                    ? (formState[formKey][key] as FormPickerState).options\n                                    : []\n                                )\n                            }\n                        }\n                    }))\n                }\n            },\n            getFormField: (formKey: string, key: string) => {\n                if (formState[formKey] && formState[formKey][key]) {\n                    return formState[formKey][key]\n                }\n\n                return {}\n            },\n            onFormFieldChange: (formKey: string, formFieldName: string, onChange: SubscribeOnChange) => {\n                useEffect(() => {\n                    setOnChangeForm(prevState => ({\n                        ...prevState,\n                        [formKey]: {\n                            ...prevState[formKey],\n                            [formFieldName]: onChange\n                        }\n                    }))\n                }, [formState])\n            },\n            clearFormStore: (formKey: string) => {\n                setFormState(prevState => ({\n                    ...prevState,\n                    [formKey]: {}\n                }))\n                setOnChangeForm(prevState => ({\n                    ...prevState,\n                    [formKey]: {}\n                }))\n            }\n        },\n        state: {\n            formState\n        }\n    }\n}\n","import { useState } from 'react'\nimport { FormConfig, OnUpdate } from '../../types'\n\nexport type ConfigStoreState = {\n    [key: string]: FormConfig\n}\n\nexport type ConfigOnUpdate = {\n    [key: string]: OnUpdate\n}\n\nexport const configStore = () => {\n    const [ configStore, setConfig ] = useState<ConfigStoreState>({})\n    const [ configOnUpdate, setConfigOnUpdate ] = useState<ConfigOnUpdate>({})\n\n    return {\n        actions: {\n            setConfig: (key: string, newConfig: FormConfig) => setConfig(prevState => ({\n                ...prevState,\n                [key]: newConfig\n            })),\n            clearConfigStore: (formKey: string) => setConfig(prevState => ({\n                ...prevState,\n                [formKey]: {}\n            })),\n            setOnUpdate: (key: string, onUpdate?: OnUpdate) => onUpdate && setConfigOnUpdate(prevState => ({\n                ...prevState,\n                [key]: onUpdate\n            }))\n        },\n        state: {\n            configStore,\n            configOnUpdate\n        }\n    }\n}\n","import { formStore } from './formStore'\nimport { configStore } from './configStore'\n\nexport const formBuilderStores = [\n    configStore,\n    formStore\n]\n\nexport {\n    configStore,\n    formStore\n}\n","import { useStore } from 'outstated'\nimport { G } from '@codegateinc/g-utils'\nimport { configStore, formStore } from '../stores'\nimport { FieldState, FormCheckBoxState, FormFieldType, FormInputState, FormOption, FormPickerState } from '../types'\n\nexport const useValidate = () => {\n    const form = useStore(formStore)\n    const config = useStore(configStore)\n\n    return {\n        validateField: (formName: string, key: string, value: string) => {\n            const field = config.state.configStore &&\n                config.state.configStore[formName] &&\n                config.state.configStore[formName][key]\n\n            if (!field.isRequired && value.length === 0) {\n                return form.actions.setFormError(formName, key, undefined)\n            }\n\n            if (field?.validationRules) {\n                const validated = field.validationRules\n                    .map(rule => rule.validationFunction(value, form.state.formState[formName])\n                        ? rule.errorMessage\n                        : undefined\n                    )\n                const [ errorMessage ] = validated\n                    .filter(value => value)\n\n                form.actions.setFormError(formName, key, errorMessage)\n            }\n        },\n        validateCheckBox: (formName: string, key: string, value: boolean) => {\n            const field = config.state.configStore &&\n                config.state.configStore[formName] &&\n                config.state.configStore[formName][key]\n\n            if (field?.validationRules) {\n                const [ rule ] = field.validationRules\n                const errorMessage = rule.validationFunction(value, form.state.formState[formName])\n                    ? rule.errorMessage\n                    : undefined\n\n                form.actions.setFormError(formName, key, errorMessage)\n            }\n        },\n        validatePicker: (formName: string, key: string, options: Array<FormOption>) => {\n            const field = config.state.configStore &&\n                config.state.configStore[formName] &&\n                config.state.configStore[formName][key]\n            const validated = field?.validationRules && field.validationRules\n                .map(rule => rule.validationFunction(options, form.state.formState[formName])\n                    ? rule.errorMessage\n                    : undefined\n                )\n            const [ errorMessage ] = validated || [undefined]\n                .filter(value => value)\n            const isAnyOptionSelected = field?.options && field.options\n                .some(option => option.isSelected)\n\n            if (field?.isRequired && isAnyOptionSelected) {\n                return form.actions.setFormError(formName, key, errorMessage)\n            }\n\n            form.actions.setFormError(formName, key, errorMessage)\n        },\n        validateForm: (formName: string, shouldUpdateStore: boolean = true) => form.state.formState[formName] ? G.toPairs<FieldState>(form.state.formState[formName])\n            .map(([key, formState]) => {\n                const configField = config.state.configStore && config.state.configStore[formName][key]\n\n                if (configField?.validationRules && formState.type === FormFieldType.Input) {\n                    const value = (formState as FormInputState).value\n\n                    if (!formState.isRequired && value === '') {\n                        return undefined\n                    }\n\n                    const validated = configField.validationRules\n                        .map(rule => rule.validationFunction(value, form.state.formState[formName])\n                            ? rule.errorMessage\n                            : undefined\n                        )\n                    const [ errorMessage ] = validated\n                        .filter(value => value)\n\n                    if (shouldUpdateStore) {\n                        form.actions.setFormError(formName, key, errorMessage)\n                    }\n\n                    return errorMessage\n                }\n\n                if (configField?.validationRules && formState.type === FormFieldType.CheckBox) {\n                    const value = (formState as FormCheckBoxState).value\n\n                    if (!formState.isRequired) {\n                        return undefined\n                    }\n\n                    const [ rule ] = configField.validationRules\n                    const errorMessage = rule.validationFunction(value, form.state.formState[formName])\n                        ? rule.errorMessage\n                        : undefined\n\n                    if (shouldUpdateStore) {\n                        form.actions.setFormError(formName, key, errorMessage)\n                    }\n\n                    return errorMessage\n                }\n\n                if (configField?.validationRules && formState.type === FormFieldType.Picker) {\n                    const options = (formState as FormPickerState).options\n\n                    if (!formState.isRequired) {\n                        return undefined\n                    }\n\n                    const validated = configField.validationRules\n                        .map(rule => rule.validationFunction(options, form.state.formState[formName])\n                            ? rule.errorMessage\n                            : undefined\n                        )\n                    const [ errorMessage ] = validated\n                        .filter(value => value)\n\n                    if (shouldUpdateStore) {\n                        form.actions.setFormError(formName, key, errorMessage)\n                    }\n\n                    return errorMessage\n                }\n            }) : []\n    }\n}\n","import { useStore } from 'outstated'\nimport { useValidate } from './useValidate'\nimport { configStore, formStore } from '../stores'\n\nexport const useBlur = () => {\n    const form = useStore(formStore)\n    const config = useStore(configStore)\n    const { validateField } = useValidate()\n\n    return {\n        onInputBlur: (formName: string, key: string, value: string) => {\n            const field = form.state.formState[formName][key]\n            const configField = config.state.configStore && config.state.configStore[formName][key]\n\n            if (field.isRequired || value !== configField?.value) {\n                form.actions.setFormPristine(formName, key, false)\n            }\n\n            validateField(formName, key, value)\n        }\n    }\n}\n","import { useStore } from 'outstated'\nimport { G } from '@codegateinc/g-utils'\nimport { useValidate } from './useValidate'\nimport { configStore, formStore } from '../stores'\nimport { FormCheckBoxState, FormInputState, FormOption, FormState } from '../types'\n\nexport const useChange = () => {\n    const { state, actions } = useStore(formStore)\n    const form = useStore(configStore)\n    const { validateField, validateCheckBox, validatePicker } = useValidate()\n\n    return {\n        onInputChange: (formName: string, key: string, value: string, callback?: (state: FormState) => void) => {\n            const field = state.formState[formName][key] as FormInputState\n            const configField = form.state.configStore &&\n                form.state.configStore[formName] &&\n                form.state.configStore[formName][key]\n\n            const parsedValue = configField?.liveParser\n                ? configField.liveParser(value)\n                : value\n\n            if (typeof parsedValue !== 'string') {\n                throw new Error('liveParser must return string on input')\n            }\n\n            const shouldValidateField = field.errorMessage || !field.isPristine || configField.forceLiveValidate\n\n            if (shouldValidateField) {\n                validateField(formName, key, parsedValue)\n            }\n\n            actions.setFormValue(formName, key, parsedValue, callback)\n        },\n        onCheckboxChange: (formName: string, key: string, callback?: (state: FormState) => void) => {\n            const field = state.formState[formName][key] as FormCheckBoxState\n            const configField = form.state.configStore &&\n                form.state.configStore[formName] &&\n                form.state.configStore[formName][key]\n\n            const parsedValue = configField?.liveParser\n                ? configField.liveParser(!field.value)\n                : !field.value\n\n            if (typeof parsedValue !== 'boolean') {\n                throw new Error('liveParser must return boolean on checkbox')\n            }\n\n            if ((field.isRequired && !field.isPristine) || field.errorMessage || configField.validationRules) {\n                validateCheckBox(formName, key, parsedValue)\n            }\n\n            actions.setFormValue(formName, key, parsedValue, callback)\n        },\n        onPickerChange: (formName: string, key: string, options: Array<FormOption>, callback?: (state: FormState) => void) => {\n            const configField = form.state.configStore &&\n                form.state.configStore[formName] &&\n                form.state.configStore[formName][key]\n\n            const parsedValue = configField?.liveParser\n                ? configField.liveParser(options)\n                : options\n\n            if (!G.is(Array, parsedValue)) {\n                throw new Error('liveParser must return array on picker')\n            }\n\n            validatePicker(formName, key, options)\n            actions.setFormOptions(formName, key, options, callback)\n        }\n    }\n}\n","import { useBlur } from './useBlur'\nimport { useChange } from './useChange'\n\nexport const useEvents = () => {\n    const { onInputBlur } = useBlur()\n    const { onInputChange, onCheckboxChange, onPickerChange } = useChange()\n\n    return {\n        input: {\n            onBlur: onInputBlur,\n            onChange: onInputChange\n        },\n        checkBox: {\n            onChange: onCheckboxChange\n        },\n        picker: {\n            onChange: onPickerChange\n        }\n    }\n}\n","import { G } from '@codegateinc/g-utils'\nimport {\n    FieldConfig,\n    FieldState,\n    FormCheckBoxState,\n    FormConfig,\n    FormFieldType,\n    FormInputState,\n    FormPickerState,\n    FormState\n} from 'types'\n\nexport const prepareFormInitialState = (formConfig: FormConfig, clearForm: boolean = false) => {\n    const configToPairs = G.toPairs<FieldConfig>(formConfig)\n        .map(([ fieldName, config ]) => {\n            if (config?.isRequired && !config?.validationRules) {\n                throw new Error('validationRules are required if field isRequired  ')\n            }\n\n            if (config.type === FormFieldType.Input) {\n                return [fieldName, {\n                    value: clearForm\n                        ? ''\n                        : config.value || '',\n                    isRequired: config?.isRequired || false,\n                    isPristine: true,\n                    disabled: config?.disabled || false,\n                    type: config.type,\n                    errorMessage: undefined\n                }]\n            }\n\n            if (config.type === FormFieldType.CheckBox) {\n                return [fieldName, {\n                    value: clearForm\n                        ? false\n                        : config.value || false,\n                    isRequired: config?.isRequired || false,\n                    isPristine: true,\n                    disabled: config?.disabled || false,\n                    type: config.type,\n                    errorMessage: undefined\n                }]\n            }\n\n            if (config.type === FormFieldType.Picker) {\n                return [fieldName, {\n                    isRequired: config?.isRequired || false,\n                    isPristine: true,\n                    disabled: config?.disabled || false,\n                    type: config.type,\n                    errorMessage: undefined,\n                    options: clearForm\n                        ? config.options?.map(option => ({\n                            ...option,\n                            isSelected: false\n                        })) || []\n                        : config.options || []\n                }]\n            }\n        }) as Array<[string, FieldState]>\n\n    return G.fromPairs(configToPairs)\n}\n\nexport const parseForm = (state: FormState) => state && G.toPairs<FieldState>(state)\n    .reduce((acc, [key, object]) => {\n        if (object.type === FormFieldType.Input || object.type === FormFieldType.CheckBox) {\n            const value = (object as FormInputState | FormCheckBoxState).value\n\n            return {\n                ...acc,\n                [key]: value\n            }\n        }\n\n        if (object.type === FormFieldType.Picker) {\n            const options = (object as FormPickerState).options\n                .filter(option => option.isSelected)\n                .map(option => option.value)\n\n            return {\n                ...acc,\n                [key]: options\n            }\n        }\n\n        return acc\n    }, {})\n","import React from 'react'\nimport { G } from '@codegateinc/g-utils'\nimport { useStore } from 'outstated'\nimport { useEvents } from 'hooks/useEvents'\nimport { configStore, formStore } from 'stores'\nimport { CheckBox, Input, Picker } from 'components'\nimport {\n    FormOption,\n    InputProps,\n    PickerProps,\n    CheckBoxProps,\n    FormInputState,\n    FormPickerState,\n    FormCheckBoxState\n} from '../types'\nimport { parseForm } from './stateUtils'\n\nexport const renderForm = (\n    children: React.ReactNode,\n    formName: string\n) => {\n    if (!children) {\n        throw new Error('children are mandatory')\n    }\n\n    return React.Children.map(children, child => renderChild(child, formName))\n}\n\nconst renderChild = (child: React.ReactNode, formName: string) => {\n    if (typeof child === 'string' || typeof child === 'number' || typeof child === null) {\n        return child\n    }\n\n    const { state } = useStore(formStore)\n    const { state: { configOnUpdate } } = useStore(configStore)\n\n    // tslint:disable-next-line:no-any\n    const reactElementChild = child as React.ReactElement<any>\n\n    if (reactElementChild.type === Input) {\n        const { input } = useEvents()\n        const inputChild = child as React.ReactElement<InputProps>\n        const key = inputChild.props.formFieldName\n        const formState = state.formState[formName]\n        const inputState = formState ? formState[key] as FormInputState : undefined\n\n        return React.cloneElement<InputProps>(inputChild, {\n            ...inputChild.props,\n            component: () => inputChild.props.component({\n                value: inputState?.value || '',\n                onChangeText: text => input.onChange(formName, key, text, state => {\n                    G.ifDefined(configOnUpdate[formName], fn => fn(parseForm(state)))\n                }),\n                onBlur: () => input.onBlur(formName, key, inputState?.value || ''),\n                errorMessage: inputState?.errorMessage,\n                disabled: inputState?.disabled || false,\n                isPristine: inputState?.isPristine || true\n            })\n        })\n    }\n\n    if (reactElementChild.type === CheckBox) {\n        const { checkBox } = useEvents()\n        const checkBoxChild = child as React.ReactElement<CheckBoxProps>\n        const key = checkBoxChild.props.formFieldName\n        const formState = state.formState[formName]\n        const checkBoxState = formState ? formState[key] as FormCheckBoxState : undefined\n\n        return React.cloneElement<CheckBoxProps>(checkBoxChild, {\n            ...checkBoxChild.props,\n            component: () => checkBoxChild.props.component({\n                value: checkBoxState?.value || false,\n                onChange: () => checkBox.onChange(formName, key, state => {\n                    G.ifDefined(configOnUpdate[formName], fn => fn(parseForm(state)))\n                }),\n                errorMessage: checkBoxState?.errorMessage,\n                disabled: checkBoxState?.disabled || false,\n                isPristine: checkBoxState?.isPristine || true\n            })\n        })\n    }\n\n    if (reactElementChild.type === Picker) {\n        const { picker } = useEvents()\n        const pickerChild = child as React.ReactElement<PickerProps>\n        const key = pickerChild.props.formFieldName\n        const formState = state.formState[formName]\n        const pickerState = formState ? formState[key] as FormPickerState : undefined\n\n        return React.cloneElement<PickerProps>(pickerChild, {\n            ...pickerChild.props,\n            component: () => pickerChild.props.component({\n                onChange: (options: Array<FormOption>) => picker.onChange(formName, key, options, state => {\n                    G.ifDefined(configOnUpdate[formName], fn => fn(parseForm(state)))\n                }),\n                errorMessage: pickerState?.errorMessage,\n                disabled: pickerState?.disabled || false,\n                isPristine: pickerState?.isPristine || true,\n                options: pickerState?.options || []\n            })\n        })\n    }\n\n    const reactElementChildren = reactElementChild.props.children\n\n    if (reactElementChildren) {\n        const newChildren = React.Children.map(reactElementChildren, child => renderChild(child, formName))\n\n        return React.cloneElement(reactElementChild, reactElementChild.props, newChildren)\n    }\n\n    return reactElementChild\n}\n","import { useEffect } from 'react'\nimport { useStore } from 'outstated'\nimport { G } from '@codegateinc/g-utils'\nimport { parseForm, prepareFormInitialState } from 'utils'\nimport { configStore, formStore } from 'stores'\nimport {\n    FieldState,\n    FieldConfig,\n    UseFormProps,\n    SubscribeOnChange\n} from 'types'\nimport { useValidate } from './useValidate'\n\nexport const useForm = <T>({\n    formName,\n    formConfig,\n    onError,\n    onSuccess,\n    onUpdate\n}: UseFormProps) => {\n    const { state, actions } = useStore(formStore)\n    const config = useStore(configStore)\n    const { validateForm } = useValidate()\n\n    useEffect(() => {\n        const formState = prepareFormInitialState(formConfig)\n\n        config.actions.setConfig(formName, formConfig)\n        config.actions.setOnUpdate(formName, onUpdate)\n        actions.setFormState(formName, formState)\n\n        return () => {\n            config.actions.clearConfigStore(formName)\n            actions.clearFormStore(formName)\n        }\n    }, [])\n\n    return {\n        submitForm: () => {\n            const validated = validateForm(formName)\n\n            const hasAnyError = validated\n                .some(value => value)\n\n            if (hasAnyError) {\n                return G.ifDefined(onError, fn => fn(validated))\n            }\n\n            const parsedForm = parseForm(state.formState[formName])\n\n            return G.ifDefined(onSuccess, fn => fn(parsedForm))\n        },\n        hasChanges: state.formState[formName] && G.toPairs<FieldState>(state.formState[formName])\n            .some(([key, object]) => !object.isPristine),\n        setField: (formFieldName: string, field: Omit<FieldConfig, 'type'>) => actions.setFormField(formName, formFieldName, field),\n        isFormValid: !validateForm(formName, false)\n            .some(error => error),\n        getField: (formFieldName: string) => actions.getFormField(formName, formFieldName),\n        subscribe: (formFieldName: string) => ({\n            onChange: <T>(onChange: SubscribeOnChange<T>) => actions.onFormFieldChange(formName, formFieldName, onChange)\n        }),\n        restoreToInitial: () => {\n            if (config.state.configStore) {\n                const newState = prepareFormInitialState(config.state.configStore[formName])\n\n                actions.setFormState(formName, newState)\n\n                G.ifDefined(onUpdate, fn => fn(parseForm(newState)))\n            }\n        },\n        clearForm: () => {\n            if (config.state.configStore) {\n                const newState = prepareFormInitialState(config.state.configStore[formName], true)\n\n                actions.setFormState(formName, newState)\n\n                G.ifDefined(onUpdate, fn => fn(parseForm(newState)))\n            }\n        },\n        setFieldError: (formFieldName: string, errorMessage: string) => actions.setFormError(formName, formFieldName, errorMessage),\n        isFormReady: G.hasKeys(state.formState[formName])\n    }\n}\n","import React, { Fragment } from 'react'\nimport { renderForm } from 'utils'\nimport { FormProps } from './types'\n\nexport const Form: React.FunctionComponent<FormProps> = ({\n    children,\n    formName\n}) => (\n    <Fragment>\n        {renderForm(children, formName)}\n    </Fragment>\n)\n","import React from 'react'\nimport { Provider } from 'outstated'\nimport { formBuilderStores } from './stores'\n\nexport const FormProvider: React.FunctionComponent = ({ children }) => (\n    <Provider stores={formBuilderStores}>\n        {children}\n    </Provider>\n)\n"],"names":["Input","component","CheckBox","Picker","FormFieldType","formStore","useState","formState","setFormState","onChangeForm","setOnChangeForm","actions","key","state","prevState","setFormValue","formKey","value","callback","newState","G","ifDefined","fn","setFormError","errorMessage","setFormPristine","isPristine","setFormOptions","newOptions","options","map","option","changedOptions","isSelected","includes","setFormField","field","type","getFormField","onFormFieldChange","formFieldName","onChange","useEffect","clearFormStore","configStore","setConfig","configOnUpdate","setConfigOnUpdate","newConfig","clearConfigStore","setOnUpdate","onUpdate","formBuilderStores","useValidate","form","useStore","config","validateField","formName","isRequired","length","undefined","validationRules","validated","rule","validationFunction","filter","validateCheckBox","validatePicker","isAnyOptionSelected","some","validateForm","shouldUpdateStore","toPairs","configField","useBlur","onInputBlur","useChange","onInputChange","parsedValue","liveParser","Error","shouldValidateField","forceLiveValidate","onCheckboxChange","onPickerChange","is","Array","useEvents","input","onBlur","checkBox","picker","prepareFormInitialState","formConfig","clearForm","configToPairs","fieldName","disabled","fromPairs","parseForm","reduce","acc","object","renderForm","children","React","Children","child","renderChild","reactElementChild","inputChild","props","inputState","cloneElement","onChangeText","text","checkBoxChild","checkBoxState","pickerChild","pickerState","reactElementChildren","newChildren","useForm","onError","onSuccess","submitForm","hasAnyError","parsedForm","hasChanges","setField","isFormValid","error","getField","subscribe","restoreToInitial","setFieldError","isFormReady","hasKeys","Form","Fragment","FormProvider","Provider","stores"],"mappings":";;;;AAGA;AACO,IAAMA,KAAK,GAAwC,SAA7CA,KAA6C;AAAA,MAAGC,SAAH,QAAGA,SAAH;AAAA,SAAmBA,SAAS,EAA5B;AAAA,CAAnD;;ACDP;AACA,AAAO,IAAMC,QAAQ,GAA2C,SAAnDA,QAAmD;AAAA,MAAGD,SAAH,QAAGA,SAAH;AAAA,SAAmBA,SAAS,EAA5B;AAAA,CAAzD;;ACDP;AACA,AAAO,IAAME,MAAM,GAAyC,SAA/CA,MAA+C;AAAA,MAAGF,SAAH,QAAGA,SAAH;AAAA,SAAmBA,SAAS,EAA5B;AAAA,CAArD;;;;;;;;;;;ACDP,IAAYG,aAAZ;;AAAA,WAAYA;AACRA,EAAAA,yCAAA,UAAA;AACAA,EAAAA,0CAAA,WAAA;AACAA,EAAAA,4CAAA,aAAA;AACH,CAJD,EAAYA,aAAa,KAAbA,aAAa,KAAA,CAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaO,IAAMC,SAAS,GAAG,SAAZA,SAAY;kBACeC,QAAQ,CAAiB,EAAjB;MAApCC;MAAWC;;mBACuBF,QAAQ,CAAoB,EAApB;MAA1CG;MAAcC;;AAEtB,SAAO;AACHC,IAAAA,OAAO,EAAE;AACLH,MAAAA,YAAY,EAAE,sBAACI,GAAD,EAAcC,KAAd;AAAA,eAAmCL,aAAY,CAAC,UAAAM,SAAS;AAAA;;AAAA,uCAChEA,SADgE,kCAElEF,GAFkE,IAE5DC,KAF4D;AAAA,SAAV,CAA/C;AAAA,OADT;AAKLE,MAAAA,YAAY,EAAE,sBAACC,OAAD,EAAkBJ,GAAlB,EAA+BK,KAA/B,EAAwDC,QAAxD;;;AACV,YAAI,CAACX,SAAS,CAACS,OAAD,CAAd,EAAyB;AACrB;AACH;;AAED,YAAMG,QAAQ,yBACPZ,SADO,kCAETS,OAFS,0BAGHT,SAAS,CAACS,OAAD,CAHN,kCAILJ,GAJK,0BAKCL,SAAS,CAACS,OAAD,CAAT,CAAmBJ,GAAnB,CALD;AAMFK,UAAAA,KAAK,EAALA;AANE,oCAAd;;AAWAT,QAAAA,aAAY,CAAC,UAAAM,SAAS;AAAA;;AAAA,uCACfA,SADe,kCAEjBE,OAFiB,0BAGXF,SAAS,CAACE,OAAD,CAHE,kCAIbJ,GAJa,0BAKPE,SAAS,CAACE,OAAD,CAAT,CAAmBJ,GAAnB,CALO;AAMVK,YAAAA,KAAK,EAALA;AANU;AAAA,SAAV,CAAZ;;AAWAG,QAAAA,CAAC,CAACC,SAAF,CAAYH,QAAZ,EAAsB,UAAAI,EAAE;AAAA,iBAAIA,EAAE,CAACH,QAAQ,CAACH,OAAD,CAAT,CAAN;AAAA,SAAxB;;AAEA,YAAIP,YAAY,CAACO,OAAD,CAAZ,IAAyBP,YAAY,CAACO,OAAD,CAAZ,CAAsBJ,GAAtB,CAA7B,EAAyD;AACrDH,UAAAA,YAAY,CAACO,OAAD,CAAZ,CAAsBJ,GAAtB,EAA2BK,KAA3B;AACH;AACJ,OArCI;AAsCLM,MAAAA,YAAY,EAAE,sBAACP,OAAD,EAAkBJ,GAAlB,EAA+BY,YAA/B;AAAA,eAAyDjB,SAAS,CAACS,OAAD,CAAT,IAAsBR,aAAY,CAAC,UAAAM,SAAS;AAAA;;AAAA,uCAC5GA,SAD4G,kCAE9GE,OAF8G,0BAGxGF,SAAS,CAACE,OAAD,CAH+F,kCAI1GJ,GAJ0G,0BAKpGE,SAAS,CAACE,OAAD,CAAT,CAAmBJ,GAAnB,CALoG;AAMvGY,YAAAA,YAAY,EAAZA;AANuG;AAAA,SAAV,CAA3F;AAAA,OAtCT;AAgDLC,MAAAA,eAAe,EAAE,yBAACT,OAAD,EAAkBJ,GAAlB,EAA+Bc,UAA/B;AAAA,eAAuDnB,SAAS,CAACS,OAAD,CAAT,IAAsBR,aAAY,CAAC,UAAAM,SAAS;AAAA;;AAAA,uCAC7GA,SAD6G,oCAE/GE,OAF+G,0BAGzGF,SAAS,CAACE,OAAD,CAHgG,kCAI3GJ,GAJ2G,0BAKrGE,SAAS,CAACE,OAAD,CAAT,CAAmBJ,GAAnB,CALqG;AAMxGc,YAAAA,UAAU,EAAVA;AANwG;AAAA,SAAV,CAAzF;AAAA,OAhDZ;AA0DLC,MAAAA,cAAc,EAAE,wBACZX,OADY,EAEZJ,GAFY,EAGZgB,UAHY,EAIZV,QAJY;AAMZ,YAAI,CAACX,SAAS,CAACS,OAAD,CAAd,EAAyB;AACrB;AACH;;AAED,YAAMG,QAAQ,GAAG,SAAXA,QAAW;;;AACb,cAAMU,OAAO,GAAGD,UAAU,CACrBE,GADW,CACP,UAAAC,MAAM;AAAA,mBAAIA,MAAM,CAACd,KAAX;AAAA,WADC,CAAhB;AAEA,cAAMe,cAAc,GAAIzB,SAAS,CAACS,OAAD,CAAT,CAAmBJ,GAAnB,EAA4CiB,OAA5C,CACnBC,GADmB,CACf,UAAAC,MAAM;AAAA,yCACJA,MADI;AAEPE,cAAAA,UAAU,EAAEJ,OAAO,CAACK,QAAR,CAAiBH,MAAM,CAACd,KAAxB;AAFL;AAAA,WADS,CAAxB;AAMA,uCACOV,SADP,oCAEKS,OAFL,0BAGWT,SAAS,CAACS,OAAD,CAHpB,oCAISJ,GAJT,0BAKeL,SAAS,CAACS,OAAD,CAAT,CAAmBJ,GAAnB,CALf;AAMYiB,YAAAA,OAAO,EAAEG;AANrB;AAUH,SAnBD;;AAqBAxB,QAAAA,aAAY,CAAC,UAAAM,SAAS;;;AAClB,cAAMe,OAAO,GAAGD,UAAU,CACrBE,GADW,CACP,UAAAC,MAAM;AAAA,mBAAIA,MAAM,CAACd,KAAX;AAAA,WADC,CAAhB;AAEA,cAAMe,cAAc,GAAIlB,SAAS,CAACE,OAAD,CAAT,CAAmBJ,GAAnB,EAA4CiB,OAA5C,CACnBC,GADmB,CACf,UAAAC,MAAM;AAAA,yCACJA,MADI;AAEPE,cAAAA,UAAU,EAAEJ,OAAO,CAACK,QAAR,CAAiBH,MAAM,CAACd,KAAxB;AAFL;AAAA,WADS,CAAxB;;AAMA,cAAIR,YAAY,CAACO,OAAD,CAAZ,IAAyBP,YAAY,CAACO,OAAD,CAAZ,CAAsBJ,GAAtB,CAA7B,EAAyD;AACrDH,YAAAA,YAAY,CAACO,OAAD,CAAZ,CAAsBJ,GAAtB,EAA2BoB,cAA3B;AACH;;AAED,uCACOlB,SADP,oCAEKE,OAFL,0BAGWF,SAAS,CAACE,OAAD,CAHpB,oCAISJ,GAJT,0BAKeE,SAAS,CAACE,OAAD,CAAT,CAAmBJ,GAAnB,CALf;AAMYiB,YAAAA,OAAO,EAAEG;AANrB;AAUH,SAvBW,CAAZ;;AAwBAZ,QAAAA,CAAC,CAACC,SAAF,CAAYH,QAAZ,EAAsB,UAAAI,EAAE;AAAA,iBAAIA,EAAE,CAACH,QAAQ,GAAGH,OAAH,CAAT,CAAN;AAAA,SAAxB;AACH,OAlHI;AAmHLmB,MAAAA,YAAY,EAAE,sBAACnB,OAAD,EAAkBJ,GAAlB,EAA+BwB,KAA/B;AACV,YAAI7B,SAAS,CAACS,OAAD,CAAT,IAAsBT,SAAS,CAACS,OAAD,CAAT,CAAmBJ,GAAnB,CAA1B,EAAmD;AAC/CJ,UAAAA,aAAY,CAAC,UAAAM,SAAS;AAAA;;AAAA,yCACfA,SADe,oCAEjBE,OAFiB,0BAGXF,SAAS,CAACE,OAAD,CAHE,oCAIbJ,GAJa;AAKVyB,cAAAA,IAAI,EAAE9B,SAAS,CAACS,OAAD,CAAT,CAAmBJ,GAAnB,EAAwByB;AALpB,eAMP9B,SAAS,CAACS,OAAD,CAAT,CAAmBJ,GAAnB,CANO,GAOPwB,KAPO;AAQVP,cAAAA,OAAO,EAAEO,KAAK,CAACP,OAAN,KAAkBtB,SAAS,CAACS,OAAD,CAAT,CAAmBJ,GAAnB,EAAwByB,IAAxB,KAAiCjC,aAAa,CAACD,MAA/C,GACpBI,SAAS,CAACS,OAAD,CAAT,CAAmBJ,GAAnB,EAA4CiB,OADxB,GAErB,EAFG;AARC;AAAA,WAAV,CAAZ;AAeH;AACJ,OArII;AAsILS,MAAAA,YAAY,EAAE,sBAACtB,OAAD,EAAkBJ,GAAlB;AACV,YAAIL,SAAS,CAACS,OAAD,CAAT,IAAsBT,SAAS,CAACS,OAAD,CAAT,CAAmBJ,GAAnB,CAA1B,EAAmD;AAC/C,iBAAOL,SAAS,CAACS,OAAD,CAAT,CAAmBJ,GAAnB,CAAP;AACH;;AAED,eAAO,EAAP;AACH,OA5II;AA6IL2B,MAAAA,iBAAiB,EAAE,2BAACvB,OAAD,EAAkBwB,aAAlB,EAAyCC,QAAzC;AACfC,QAAAA,SAAS,CAAC;AACNhC,UAAAA,eAAe,CAAC,UAAAI,SAAS;AAAA;;AAAA,yCAClBA,SADkB,oCAEpBE,OAFoB,0BAGdF,SAAS,CAACE,OAAD,CAHK,oCAIhBwB,aAJgB,IAIAC,QAJA;AAAA,WAAV,CAAf;AAOH,SARQ,EAQN,CAAClC,SAAD,CARM,CAAT;AASH,OAvJI;AAwJLoC,MAAAA,cAAc,EAAE,wBAAC3B,OAAD;AACZR,QAAAA,aAAY,CAAC,UAAAM,SAAS;AAAA;;AAAA,uCACfA,SADe,oCAEjBE,OAFiB,IAEP,EAFO;AAAA,SAAV,CAAZ;;AAIAN,QAAAA,eAAe,CAAC,UAAAI,SAAS;AAAA;;AAAA,uCAClBA,SADkB,oCAEpBE,OAFoB,IAEV,EAFU;AAAA,SAAV,CAAf;AAIH;AAjKI,KADN;AAoKHH,IAAAA,KAAK,EAAE;AACHN,MAAAA,SAAS,EAATA;AADG;AApKJ,GAAP;AAwKH,CA5KM;;ACLA,IAAMqC,WAAW,GAAG;kBACYtC,QAAQ,CAAmB,EAAnB;MAAnCsC;MAAaC;;mBACyBvC,QAAQ,CAAiB,EAAjB;MAA9CwC;MAAgBC;;AAExB,SAAO;AACHpC,IAAAA,OAAO,EAAE;AACLkC,MAAAA,SAAS,EAAE,mBAACjC,GAAD,EAAcoC,SAAd;AAAA,eAAwCH,UAAS,CAAC,UAAA/B,SAAS;AAAA;;AAAA,uCAC/DA,SAD+D,kCAEjEF,GAFiE,IAE3DoC,SAF2D;AAAA,SAAV,CAAjD;AAAA,OADN;AAKLC,MAAAA,gBAAgB,EAAE,0BAACjC,OAAD;AAAA,eAAqB6B,UAAS,CAAC,UAAA/B,SAAS;AAAA;;AAAA,uCACnDA,SADmD,kCAErDE,OAFqD,IAE3C,EAF2C;AAAA,SAAV,CAA9B;AAAA,OALb;AASLkC,MAAAA,WAAW,EAAE,qBAACtC,GAAD,EAAcuC,QAAd;AAAA,eAAsCA,QAAQ,IAAIJ,iBAAiB,CAAC,UAAAjC,SAAS;AAAA;;AAAA,uCACnFA,SADmF,kCAErFF,GAFqF,IAE/EuC,QAF+E;AAAA,SAAV,CAAnE;AAAA;AATR,KADN;AAeHtC,IAAAA,KAAK,EAAE;AACH+B,MAAAA,WAAW,EAAXA,WADG;AAEHE,MAAAA,cAAc,EAAdA;AAFG;AAfJ,GAAP;AAoBH,CAxBM;;ACRA,IAAMM,iBAAiB,GAAG,CAC7BR,WAD6B,EAE7BvC,SAF6B,CAA1B;;ACEA,IAAMgD,WAAW,GAAG,SAAdA,WAAc;AACvB,MAAMC,IAAI,GAAGC,QAAQ,CAAClD,SAAD,CAArB;AACA,MAAMmD,MAAM,GAAGD,QAAQ,CAACX,WAAD,CAAvB;AAEA,SAAO;AACHa,IAAAA,aAAa,EAAE,uBAACC,QAAD,EAAmB9C,GAAnB,EAAgCK,KAAhC;AACX,UAAMmB,KAAK,GAAGoB,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,IACVY,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,CAAyBc,QAAzB,CADU,IAEVF,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,CAAyBc,QAAzB,EAAmC9C,GAAnC,CAFJ;;AAIA,UAAI,CAACwB,KAAK,CAACuB,UAAP,IAAqB1C,KAAK,CAAC2C,MAAN,KAAiB,CAA1C,EAA6C;AACzC,eAAON,IAAI,CAAC3C,OAAL,CAAaY,YAAb,CAA0BmC,QAA1B,EAAoC9C,GAApC,EAAyCiD,SAAzC,CAAP;AACH;;AAED,UAAIzB,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAE0B,eAAX,EAA4B;AACxB,YAAMC,SAAS,GAAG3B,KAAK,CAAC0B,eAAN,CACbhC,GADa,CACT,UAAAkC,IAAI;AAAA,iBAAIA,IAAI,CAACC,kBAAL,CAAwBhD,KAAxB,EAA+BqC,IAAI,CAACzC,KAAL,CAAWN,SAAX,CAAqBmD,QAArB,CAA/B,IACPM,IAAI,CAACxC,YADE,GAEPqC,SAFG;AAAA,SADK,CAAlB;;AADwB,gCAMCE,SAAS,CAC7BG,MADoB,CACb,UAAAjD,KAAK;AAAA,iBAAIA,KAAJ;AAAA,SADQ,CAND;AAAA,YAMhBO,YANgB;;AASxB8B,QAAAA,IAAI,CAAC3C,OAAL,CAAaY,YAAb,CAA0BmC,QAA1B,EAAoC9C,GAApC,EAAyCY,YAAzC;AACH;AACJ,KArBE;AAsBH2C,IAAAA,gBAAgB,EAAE,0BAACT,QAAD,EAAmB9C,GAAnB,EAAgCK,KAAhC;AACd,UAAMmB,KAAK,GAAGoB,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,IACVY,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,CAAyBc,QAAzB,CADU,IAEVF,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,CAAyBc,QAAzB,EAAmC9C,GAAnC,CAFJ;;AAIA,UAAIwB,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAE0B,eAAX,EAA4B;AAAA,oCACP1B,KAAK,CAAC0B,eADC;AAAA,YAChBE,IADgB;AAExB,YAAMxC,YAAY,GAAGwC,IAAI,CAACC,kBAAL,CAAwBhD,KAAxB,EAA+BqC,IAAI,CAACzC,KAAL,CAAWN,SAAX,CAAqBmD,QAArB,CAA/B,IACfM,IAAI,CAACxC,YADU,GAEfqC,SAFN;AAIAP,QAAAA,IAAI,CAAC3C,OAAL,CAAaY,YAAb,CAA0BmC,QAA1B,EAAoC9C,GAApC,EAAyCY,YAAzC;AACH;AACJ,KAnCE;AAoCH4C,IAAAA,cAAc,EAAE,wBAACV,QAAD,EAAmB9C,GAAnB,EAAgCiB,OAAhC;AACZ,UAAMO,KAAK,GAAGoB,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,IACVY,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,CAAyBc,QAAzB,CADU,IAEVF,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,CAAyBc,QAAzB,EAAmC9C,GAAnC,CAFJ;AAGA,UAAMmD,SAAS,GAAG,CAAA3B,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAE0B,eAAP,KAA0B1B,KAAK,CAAC0B,eAAN,CACvChC,GADuC,CACnC,UAAAkC,IAAI;AAAA,eAAIA,IAAI,CAACC,kBAAL,CAAwBpC,OAAxB,EAAiCyB,IAAI,CAACzC,KAAL,CAAWN,SAAX,CAAqBmD,QAArB,CAAjC,IACPM,IAAI,CAACxC,YADE,GAEPqC,SAFG;AAAA,OAD+B,CAA5C;;iBAKyBE,SAAS,IAAI,CAACF,SAAD,EACjCK,MADiC,CAC1B,UAAAjD,KAAK;AAAA,eAAIA,KAAJ;AAAA,OADqB;UAA9BO;;AAER,UAAM6C,mBAAmB,GAAG,CAAAjC,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEP,OAAP,KAAkBO,KAAK,CAACP,OAAN,CACzCyC,IADyC,CACpC,UAAAvC,MAAM;AAAA,eAAIA,MAAM,CAACE,UAAX;AAAA,OAD8B,CAA9C;;AAGA,UAAI,CAAAG,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEuB,UAAP,KAAqBU,mBAAzB,EAA8C;AAC1C,eAAOf,IAAI,CAAC3C,OAAL,CAAaY,YAAb,CAA0BmC,QAA1B,EAAoC9C,GAApC,EAAyCY,YAAzC,CAAP;AACH;;AAED8B,MAAAA,IAAI,CAAC3C,OAAL,CAAaY,YAAb,CAA0BmC,QAA1B,EAAoC9C,GAApC,EAAyCY,YAAzC;AACH,KAvDE;AAwDH+C,IAAAA,YAAY,EAAE,sBAACb,QAAD,EAAmBc,iBAAnB;AAAA,UAAmBA,iBAAnB;AAAmBA,QAAAA,iBAAnB,GAAgD,IAAhD;AAAA;;AAAA,aAAyDlB,IAAI,CAACzC,KAAL,CAAWN,SAAX,CAAqBmD,QAArB,IAAiCtC,CAAC,CAACqD,OAAF,CAAsBnB,IAAI,CAACzC,KAAL,CAAWN,SAAX,CAAqBmD,QAArB,CAAtB,EACnG5B,GADmG,CAC/F;YAAElB;YAAKL;AACR,YAAMmE,WAAW,GAAGlB,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,IAA4BY,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,CAAyBc,QAAzB,EAAmC9C,GAAnC,CAAhD;;AAEA,YAAI,CAAA8D,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEZ,eAAb,KAAgCvD,SAAS,CAAC8B,IAAV,KAAmBjC,aAAa,CAACJ,KAArE,EAA4E;AACxE,cAAMiB,KAAK,GAAIV,SAA4B,CAACU,KAA5C;;AAEA,cAAI,CAACV,SAAS,CAACoD,UAAX,IAAyB1C,KAAK,KAAK,EAAvC,EAA2C;AACvC,mBAAO4C,SAAP;AACH;;AAED,cAAME,SAAS,GAAGW,WAAW,CAACZ,eAAZ,CACbhC,GADa,CACT,UAAAkC,IAAI;AAAA,mBAAIA,IAAI,CAACC,kBAAL,CAAwBhD,KAAxB,EAA+BqC,IAAI,CAACzC,KAAL,CAAWN,SAAX,CAAqBmD,QAArB,CAA/B,IACPM,IAAI,CAACxC,YADE,GAEPqC,SAFG;AAAA,WADK,CAAlB;;AAPwE,mCAY/CE,SAAS,CAC7BG,MADoB,CACb,UAAAjD,KAAK;AAAA,mBAAIA,KAAJ;AAAA,WADQ,CAZ+C;AAAA,cAYhEO,YAZgE;;AAexE,cAAIgD,iBAAJ,EAAuB;AACnBlB,YAAAA,IAAI,CAAC3C,OAAL,CAAaY,YAAb,CAA0BmC,QAA1B,EAAoC9C,GAApC,EAAyCY,YAAzC;AACH;;AAED,iBAAOA,YAAP;AACH;;AAED,YAAI,CAAAkD,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEZ,eAAb,KAAgCvD,SAAS,CAAC8B,IAAV,KAAmBjC,aAAa,CAACF,QAArE,EAA+E;AAC3E,cAAMe,MAAK,GAAIV,SAA+B,CAACU,KAA/C;;AAEA,cAAI,CAACV,SAAS,CAACoD,UAAf,EAA2B;AACvB,mBAAOE,SAAP;AACH;;AAL0E,sCAO1Da,WAAW,CAACZ,eAP8C;AAAA,cAOnEE,IAPmE;;AAQ3E,cAAMxC,aAAY,GAAGwC,IAAI,CAACC,kBAAL,CAAwBhD,MAAxB,EAA+BqC,IAAI,CAACzC,KAAL,CAAWN,SAAX,CAAqBmD,QAArB,CAA/B,IACfM,IAAI,CAACxC,YADU,GAEfqC,SAFN;;AAIA,cAAIW,iBAAJ,EAAuB;AACnBlB,YAAAA,IAAI,CAAC3C,OAAL,CAAaY,YAAb,CAA0BmC,QAA1B,EAAoC9C,GAApC,EAAyCY,aAAzC;AACH;;AAED,iBAAOA,aAAP;AACH;;AAED,YAAI,CAAAkD,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEZ,eAAb,KAAgCvD,SAAS,CAAC8B,IAAV,KAAmBjC,aAAa,CAACD,MAArE,EAA6E;AACzE,cAAM0B,OAAO,GAAItB,SAA6B,CAACsB,OAA/C;;AAEA,cAAI,CAACtB,SAAS,CAACoD,UAAf,EAA2B;AACvB,mBAAOE,SAAP;AACH;;AAED,cAAME,UAAS,GAAGW,WAAW,CAACZ,eAAZ,CACbhC,GADa,CACT,UAAAkC,IAAI;AAAA,mBAAIA,IAAI,CAACC,kBAAL,CAAwBpC,OAAxB,EAAiCyB,IAAI,CAACzC,KAAL,CAAWN,SAAX,CAAqBmD,QAArB,CAAjC,IACPM,IAAI,CAACxC,YADE,GAEPqC,SAFG;AAAA,WADK,CAAlB;;AAPyE,mCAYhDE,UAAS,CAC7BG,MADoB,CACb,UAAAjD,KAAK;AAAA,mBAAIA,KAAJ;AAAA,WADQ,CAZgD;AAAA,cAYjEO,cAZiE;;AAezE,cAAIgD,iBAAJ,EAAuB;AACnBlB,YAAAA,IAAI,CAAC3C,OAAL,CAAaY,YAAb,CAA0BmC,QAA1B,EAAoC9C,GAApC,EAAyCY,cAAzC;AACH;;AAED,iBAAOA,cAAP;AACH;AACJ,OAlEmG,CAAjC,GAkE9D,EAlEK;AAAA;AAxDX,GAAP;AA4HH,CAhIM;;ACDA,IAAMmD,OAAO,GAAG,SAAVA,OAAU;AACnB,MAAMrB,IAAI,GAAGC,QAAQ,CAAClD,SAAD,CAArB;AACA,MAAMmD,MAAM,GAAGD,QAAQ,CAACX,WAAD,CAAvB;;qBAC0BS,WAAW;MAA7BI,6BAAAA;;AAER,SAAO;AACHmB,IAAAA,WAAW,EAAE,qBAAClB,QAAD,EAAmB9C,GAAnB,EAAgCK,KAAhC;AACT,UAAMmB,KAAK,GAAGkB,IAAI,CAACzC,KAAL,CAAWN,SAAX,CAAqBmD,QAArB,EAA+B9C,GAA/B,CAAd;AACA,UAAM8D,WAAW,GAAGlB,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,IAA4BY,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,CAAyBc,QAAzB,EAAmC9C,GAAnC,CAAhD;;AAEA,UAAIwB,KAAK,CAACuB,UAAN,IAAoB1C,KAAK,MAAKyD,WAAL,aAAKA,WAAL,uBAAKA,WAAW,CAAEzD,KAAlB,CAA7B,EAAsD;AAClDqC,QAAAA,IAAI,CAAC3C,OAAL,CAAac,eAAb,CAA6BiC,QAA7B,EAAuC9C,GAAvC,EAA4C,KAA5C;AACH;;AAED6C,MAAAA,aAAa,CAACC,QAAD,EAAW9C,GAAX,EAAgBK,KAAhB,CAAb;AACH;AAVE,GAAP;AAYH,CAjBM;;ACEA,IAAM4D,SAAS,GAAG,SAAZA,SAAY;kBACMtB,QAAQ,CAAClD,SAAD;MAA3BQ,kBAAAA;MAAOF,oBAAAA;;AACf,MAAM2C,IAAI,GAAGC,QAAQ,CAACX,WAAD,CAArB;;qBAC4DS,WAAW;MAA/DI,6BAAAA;MAAeU,gCAAAA;MAAkBC,8BAAAA;;AAEzC,SAAO;AACHU,IAAAA,aAAa,EAAE,uBAACpB,QAAD,EAAmB9C,GAAnB,EAAgCK,KAAhC,EAA+CC,QAA/C;AACX,UAAMkB,KAAK,GAAGvB,KAAK,CAACN,SAAN,CAAgBmD,QAAhB,EAA0B9C,GAA1B,CAAd;AACA,UAAM8D,WAAW,GAAGpB,IAAI,CAACzC,KAAL,CAAW+B,WAAX,IAChBU,IAAI,CAACzC,KAAL,CAAW+B,WAAX,CAAuBc,QAAvB,CADgB,IAEhBJ,IAAI,CAACzC,KAAL,CAAW+B,WAAX,CAAuBc,QAAvB,EAAiC9C,GAAjC,CAFJ;AAIA,UAAMmE,WAAW,GAAG,CAAAL,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEM,UAAb,IACdN,WAAW,CAACM,UAAZ,CAAuB/D,KAAvB,CADc,GAEdA,KAFN;;AAIA,UAAI,OAAO8D,WAAP,KAAuB,QAA3B,EAAqC;AACjC,cAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACH;;AAED,UAAMC,mBAAmB,GAAG9C,KAAK,CAACZ,YAAN,IAAsB,CAACY,KAAK,CAACV,UAA7B,IAA2CgD,WAAW,CAACS,iBAAnF;;AAEA,UAAID,mBAAJ,EAAyB;AACrBzB,QAAAA,aAAa,CAACC,QAAD,EAAW9C,GAAX,EAAgBmE,WAAhB,CAAb;AACH;;AAEDpE,MAAAA,OAAO,CAACI,YAAR,CAAqB2C,QAArB,EAA+B9C,GAA/B,EAAoCmE,WAApC,EAAiD7D,QAAjD;AACH,KAtBE;AAuBHkE,IAAAA,gBAAgB,EAAE,0BAAC1B,QAAD,EAAmB9C,GAAnB,EAAgCM,QAAhC;AACd,UAAMkB,KAAK,GAAGvB,KAAK,CAACN,SAAN,CAAgBmD,QAAhB,EAA0B9C,GAA1B,CAAd;AACA,UAAM8D,WAAW,GAAGpB,IAAI,CAACzC,KAAL,CAAW+B,WAAX,IAChBU,IAAI,CAACzC,KAAL,CAAW+B,WAAX,CAAuBc,QAAvB,CADgB,IAEhBJ,IAAI,CAACzC,KAAL,CAAW+B,WAAX,CAAuBc,QAAvB,EAAiC9C,GAAjC,CAFJ;AAIA,UAAMmE,WAAW,GAAG,CAAAL,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEM,UAAb,IACdN,WAAW,CAACM,UAAZ,CAAuB,CAAC5C,KAAK,CAACnB,KAA9B,CADc,GAEd,CAACmB,KAAK,CAACnB,KAFb;;AAIA,UAAI,OAAO8D,WAAP,KAAuB,SAA3B,EAAsC;AAClC,cAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH;;AAED,UAAK7C,KAAK,CAACuB,UAAN,IAAoB,CAACvB,KAAK,CAACV,UAA5B,IAA2CU,KAAK,CAACZ,YAAjD,IAAiEkD,WAAW,CAACZ,eAAjF,EAAkG;AAC9FK,QAAAA,gBAAgB,CAACT,QAAD,EAAW9C,GAAX,EAAgBmE,WAAhB,CAAhB;AACH;;AAEDpE,MAAAA,OAAO,CAACI,YAAR,CAAqB2C,QAArB,EAA+B9C,GAA/B,EAAoCmE,WAApC,EAAiD7D,QAAjD;AACH,KA1CE;AA2CHmE,IAAAA,cAAc,EAAE,wBAAC3B,QAAD,EAAmB9C,GAAnB,EAAgCiB,OAAhC,EAA4DX,QAA5D;AACZ,UAAMwD,WAAW,GAAGpB,IAAI,CAACzC,KAAL,CAAW+B,WAAX,IAChBU,IAAI,CAACzC,KAAL,CAAW+B,WAAX,CAAuBc,QAAvB,CADgB,IAEhBJ,IAAI,CAACzC,KAAL,CAAW+B,WAAX,CAAuBc,QAAvB,EAAiC9C,GAAjC,CAFJ;AAIA,UAAMmE,WAAW,GAAG,CAAAL,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEM,UAAb,IACdN,WAAW,CAACM,UAAZ,CAAuBnD,OAAvB,CADc,GAEdA,OAFN;;AAIA,UAAI,CAACT,CAAC,CAACkE,EAAF,CAAKC,KAAL,EAAYR,WAAZ,CAAL,EAA+B;AAC3B,cAAM,IAAIE,KAAJ,CAAU,wCAAV,CAAN;AACH;;AAEDb,MAAAA,cAAc,CAACV,QAAD,EAAW9C,GAAX,EAAgBiB,OAAhB,CAAd;AACAlB,MAAAA,OAAO,CAACgB,cAAR,CAAuB+B,QAAvB,EAAiC9C,GAAjC,EAAsCiB,OAAtC,EAA+CX,QAA/C;AACH;AA1DE,GAAP;AA4DH,CAjEM;;ACHA,IAAMsE,SAAS,GAAG,SAAZA,SAAY;iBACGb,OAAO;MAAvBC,uBAAAA;;mBACoDC,SAAS;MAA7DC,2BAAAA;MAAeM,8BAAAA;MAAkBC,4BAAAA;;AAEzC,SAAO;AACHI,IAAAA,KAAK,EAAE;AACHC,MAAAA,MAAM,EAAEd,WADL;AAEHnC,MAAAA,QAAQ,EAAEqC;AAFP,KADJ;AAKHa,IAAAA,QAAQ,EAAE;AACNlD,MAAAA,QAAQ,EAAE2C;AADJ,KALP;AAQHQ,IAAAA,MAAM,EAAE;AACJnD,MAAAA,QAAQ,EAAE4C;AADN;AARL,GAAP;AAYH,CAhBM;;ACSA,IAAMQ,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,UAAD,EAAyBC,SAAzB;MAAyBA;AAAAA,IAAAA,YAAqB;;;AACjF,MAAMC,aAAa,GAAG5E,CAAC,CAACqD,OAAF,CAAuBqB,UAAvB,EACjBhE,GADiB,CACb;QAAGmE;QAAWzC;;AACf,QAAI,CAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,UAAR,KAAsB,EAACH,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEM,eAAT,CAA1B,EAAoD;AAChD,YAAM,IAAImB,KAAJ,CAAU,oDAAV,CAAN;AACH;;AAED,QAAIzB,MAAM,CAACnB,IAAP,KAAgBjC,aAAa,CAACJ,KAAlC,EAAyC;AACrC,aAAO,CAACiG,SAAD,EAAY;AACfhF,QAAAA,KAAK,EAAE8E,SAAS,GACV,EADU,GAEVvC,MAAM,CAACvC,KAAP,IAAgB,EAHP;AAIf0C,QAAAA,UAAU,EAAE,CAAAH,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,UAAR,KAAsB,KAJnB;AAKfjC,QAAAA,UAAU,EAAE,IALG;AAMfwE,QAAAA,QAAQ,EAAE,CAAA1C,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAE0C,QAAR,KAAoB,KANf;AAOf7D,QAAAA,IAAI,EAAEmB,MAAM,CAACnB,IAPE;AAQfb,QAAAA,YAAY,EAAEqC;AARC,OAAZ,CAAP;AAUH;;AAED,QAAIL,MAAM,CAACnB,IAAP,KAAgBjC,aAAa,CAACF,QAAlC,EAA4C;AACxC,aAAO,CAAC+F,SAAD,EAAY;AACfhF,QAAAA,KAAK,EAAE8E,SAAS,GACV,KADU,GAEVvC,MAAM,CAACvC,KAAP,IAAgB,KAHP;AAIf0C,QAAAA,UAAU,EAAE,CAAAH,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,UAAR,KAAsB,KAJnB;AAKfjC,QAAAA,UAAU,EAAE,IALG;AAMfwE,QAAAA,QAAQ,EAAE,CAAA1C,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAE0C,QAAR,KAAoB,KANf;AAOf7D,QAAAA,IAAI,EAAEmB,MAAM,CAACnB,IAPE;AAQfb,QAAAA,YAAY,EAAEqC;AARC,OAAZ,CAAP;AAUH;;AAED,QAAIL,MAAM,CAACnB,IAAP,KAAgBjC,aAAa,CAACD,MAAlC,EAA0C;AAAA;;AACtC,aAAO,CAAC8F,SAAD,EAAY;AACftC,QAAAA,UAAU,EAAE,CAAAH,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEG,UAAR,KAAsB,KADnB;AAEfjC,QAAAA,UAAU,EAAE,IAFG;AAGfwE,QAAAA,QAAQ,EAAE,CAAA1C,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAE0C,QAAR,KAAoB,KAHf;AAIf7D,QAAAA,IAAI,EAAEmB,MAAM,CAACnB,IAJE;AAKfb,QAAAA,YAAY,EAAEqC,SALC;AAMfhC,QAAAA,OAAO,EAAEkE,SAAS,GACZ,oBAAAvC,MAAM,CAAC3B,OAAP,oEAAgBC,GAAhB,CAAoB,UAAAC,MAAM;AAAA,uCACrBA,MADqB;AAExBE,YAAAA,UAAU,EAAE;AAFY;AAAA,SAA1B,MAGK,EAJO,GAKZuB,MAAM,CAAC3B,OAAP,IAAkB;AAXT,OAAZ,CAAP;AAaH;AACJ,GA/CiB,CAAtB;AAiDA,SAAOT,CAAC,CAAC+E,SAAF,CAAYH,aAAZ,CAAP;AACH,CAnDM;AAqDP,AAAO,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAACvF,KAAD;AAAA,SAAsBA,KAAK,IAAIO,CAAC,CAACqD,OAAF,CAAsB5D,KAAtB,EACnDwF,MADmD,CAC5C,UAACC,GAAD;QAAO1F;QAAK2F;;AAChB,QAAIA,MAAM,CAAClE,IAAP,KAAgBjC,aAAa,CAACJ,KAA9B,IAAuCuG,MAAM,CAAClE,IAAP,KAAgBjC,aAAa,CAACF,QAAzE,EAAmF;AAAA;;AAC/E,UAAMe,KAAK,GAAIsF,MAA6C,CAACtF,KAA7D;AAEA,mCACOqF,GADP,kCAEK1F,GAFL,IAEWK,KAFX;AAIH;;AAED,QAAIsF,MAAM,CAAClE,IAAP,KAAgBjC,aAAa,CAACD,MAAlC,EAA0C;AAAA;;AACtC,UAAM0B,OAAO,GAAI0E,MAA0B,CAAC1E,OAA3B,CACZqC,MADY,CACL,UAAAnC,MAAM;AAAA,eAAIA,MAAM,CAACE,UAAX;AAAA,OADD,EAEZH,GAFY,CAER,UAAAC,MAAM;AAAA,eAAIA,MAAM,CAACd,KAAX;AAAA,OAFE,CAAjB;AAIA,mCACOqF,GADP,kCAEK1F,GAFL,IAEWiB,OAFX;AAIH;;AAED,WAAOyE,GAAP;AACH,GAvBmD,EAuBjD,EAvBiD,CAA/B;AAAA,CAAlB;;AChDA,IAAME,UAAU,GAAG,SAAbA,UAAa,CACtBC,QADsB,EAEtB/C,QAFsB;AAItB,MAAI,CAAC+C,QAAL,EAAe;AACX,UAAM,IAAIxB,KAAJ,CAAU,wBAAV,CAAN;AACH;;AAED,SAAOyB,KAAK,CAACC,QAAN,CAAe7E,GAAf,CAAmB2E,QAAnB,EAA6B,UAAAG,KAAK;AAAA,WAAIC,WAAW,CAACD,KAAD,EAAQlD,QAAR,CAAf;AAAA,GAAlC,CAAP;AACH,CATM;;AAWP,IAAMmD,WAAW,GAAG,SAAdA,WAAc,CAACD,KAAD,EAAyBlD,QAAzB;AAChB,MAAI,OAAOkD,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAA9C,IAA0D,OAAOA,KAAP,KAAiB,IAA/E,EAAqF;AACjF,WAAOA,KAAP;AACH;;kBAEiBrD,QAAQ,CAAClD,SAAD;MAAlBQ,kBAAAA;;mBAC8B0C,QAAQ,CAACX,WAAD;MAA7BE,4BAATjC,MAASiC;;;AAGjB,MAAMgE,iBAAiB,GAAGF,KAA1B;;AAEA,MAAIE,iBAAiB,CAACzE,IAAlB,KAA2BrC,KAA/B,EAAsC;AAAA,qBAChBwF,SAAS,EADO;AAAA,QAC1BC,KAD0B,cAC1BA,KAD0B;;AAElC,QAAMsB,UAAU,GAAGH,KAAnB;AACA,QAAMhG,GAAG,GAAGmG,UAAU,CAACC,KAAX,CAAiBxE,aAA7B;AACA,QAAMjC,SAAS,GAAGM,KAAK,CAACN,SAAN,CAAgBmD,QAAhB,CAAlB;AACA,QAAMuD,UAAU,GAAG1G,SAAS,GAAGA,SAAS,CAACK,GAAD,CAAZ,GAAsCiD,SAAlE;AAEA,WAAO6C,KAAK,CAACQ,YAAN,CAA+BH,UAA/B,wBACAA,UAAU,CAACC,KADX;AAEH/G,MAAAA,SAAS,EAAE;AAAA,eAAM8G,UAAU,CAACC,KAAX,CAAiB/G,SAAjB,CAA2B;AACxCgB,UAAAA,KAAK,EAAE,CAAAgG,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEhG,KAAZ,KAAqB,EADY;AAExCkG,UAAAA,YAAY,EAAE,sBAAAC,IAAI;AAAA,mBAAI3B,KAAK,CAAChD,QAAN,CAAeiB,QAAf,EAAyB9C,GAAzB,EAA8BwG,IAA9B,EAAoC,UAAAvG,KAAK;AAC3DO,cAAAA,CAAC,CAACC,SAAF,CAAYyB,cAAc,CAACY,QAAD,CAA1B,EAAsC,UAAApC,EAAE;AAAA,uBAAIA,EAAE,CAAC8E,SAAS,CAACvF,KAAD,CAAV,CAAN;AAAA,eAAxC;AACH,aAFqB,CAAJ;AAAA,WAFsB;AAKxC6E,UAAAA,MAAM,EAAE;AAAA,mBAAMD,KAAK,CAACC,MAAN,CAAahC,QAAb,EAAuB9C,GAAvB,EAA4B,CAAAqG,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEhG,KAAZ,KAAqB,EAAjD,CAAN;AAAA,WALgC;AAMxCO,UAAAA,YAAY,EAAEyF,UAAF,aAAEA,UAAF,uBAAEA,UAAU,CAAEzF,YANc;AAOxC0E,UAAAA,QAAQ,EAAE,CAAAe,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEf,QAAZ,KAAwB,KAPM;AAQxCxE,UAAAA,UAAU,EAAE,CAAAuF,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEvF,UAAZ,KAA0B;AARE,SAA3B,CAAN;AAAA;AAFR,OAAP;AAaH;;AAED,MAAIoF,iBAAiB,CAACzE,IAAlB,KAA2BnC,QAA/B,EAAyC;AAAA,sBAChBsF,SAAS,EADO;AAAA,QAC7BG,QAD6B,eAC7BA,QAD6B;;AAErC,QAAM0B,aAAa,GAAGT,KAAtB;AACA,QAAMhG,IAAG,GAAGyG,aAAa,CAACL,KAAd,CAAoBxE,aAAhC;AACA,QAAMjC,UAAS,GAAGM,KAAK,CAACN,SAAN,CAAgBmD,QAAhB,CAAlB;AACA,QAAM4D,aAAa,GAAG/G,UAAS,GAAGA,UAAS,CAACK,IAAD,CAAZ,GAAyCiD,SAAxE;AAEA,WAAO6C,KAAK,CAACQ,YAAN,CAAkCG,aAAlC,wBACAA,aAAa,CAACL,KADd;AAEH/G,MAAAA,SAAS,EAAE;AAAA,eAAMoH,aAAa,CAACL,KAAd,CAAoB/G,SAApB,CAA8B;AAC3CgB,UAAAA,KAAK,EAAE,CAAAqG,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAErG,KAAf,KAAwB,KADY;AAE3CwB,UAAAA,QAAQ,EAAE;AAAA,mBAAMkD,QAAQ,CAAClD,QAAT,CAAkBiB,QAAlB,EAA4B9C,IAA5B,EAAiC,UAAAC,KAAK;AAClDO,cAAAA,CAAC,CAACC,SAAF,CAAYyB,cAAc,CAACY,QAAD,CAA1B,EAAsC,UAAApC,EAAE;AAAA,uBAAIA,EAAE,CAAC8E,SAAS,CAACvF,KAAD,CAAV,CAAN;AAAA,eAAxC;AACH,aAFe,CAAN;AAAA,WAFiC;AAK3CW,UAAAA,YAAY,EAAE8F,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAE9F,YALc;AAM3C0E,UAAAA,QAAQ,EAAE,CAAAoB,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAEpB,QAAf,KAA2B,KANM;AAO3CxE,UAAAA,UAAU,EAAE,CAAA4F,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAE5F,UAAf,KAA6B;AAPE,SAA9B,CAAN;AAAA;AAFR,OAAP;AAYH;;AAED,MAAIoF,iBAAiB,CAACzE,IAAlB,KAA2BlC,MAA/B,EAAuC;AAAA,sBAChBqF,SAAS,EADO;AAAA,QAC3BI,MAD2B,eAC3BA,MAD2B;;AAEnC,QAAM2B,WAAW,GAAGX,KAApB;AACA,QAAMhG,KAAG,GAAG2G,WAAW,CAACP,KAAZ,CAAkBxE,aAA9B;AACA,QAAMjC,WAAS,GAAGM,KAAK,CAACN,SAAN,CAAgBmD,QAAhB,CAAlB;AACA,QAAM8D,WAAW,GAAGjH,WAAS,GAAGA,WAAS,CAACK,KAAD,CAAZ,GAAuCiD,SAApE;AAEA,WAAO6C,KAAK,CAACQ,YAAN,CAAgCK,WAAhC,wBACAA,WAAW,CAACP,KADZ;AAEH/G,MAAAA,SAAS,EAAE;AAAA,eAAMsH,WAAW,CAACP,KAAZ,CAAkB/G,SAAlB,CAA4B;AACzCwC,UAAAA,QAAQ,EAAE,kBAACZ,OAAD;AAAA,mBAAgC+D,MAAM,CAACnD,QAAP,CAAgBiB,QAAhB,EAA0B9C,KAA1B,EAA+BiB,OAA/B,EAAwC,UAAAhB,KAAK;AACnFO,cAAAA,CAAC,CAACC,SAAF,CAAYyB,cAAc,CAACY,QAAD,CAA1B,EAAsC,UAAApC,EAAE;AAAA,uBAAIA,EAAE,CAAC8E,SAAS,CAACvF,KAAD,CAAV,CAAN;AAAA,eAAxC;AACH,aAFyC,CAAhC;AAAA,WAD+B;AAIzCW,UAAAA,YAAY,EAAEgG,WAAF,aAAEA,WAAF,uBAAEA,WAAW,CAAEhG,YAJc;AAKzC0E,UAAAA,QAAQ,EAAE,CAAAsB,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEtB,QAAb,KAAyB,KALM;AAMzCxE,UAAAA,UAAU,EAAE,CAAA8F,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAE9F,UAAb,KAA2B,IANE;AAOzCG,UAAAA,OAAO,EAAE,CAAA2F,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAE3F,OAAb,KAAwB;AAPQ,SAA5B,CAAN;AAAA;AAFR,OAAP;AAYH;;AAED,MAAM4F,oBAAoB,GAAGX,iBAAiB,CAACE,KAAlB,CAAwBP,QAArD;;AAEA,MAAIgB,oBAAJ,EAA0B;AACtB,QAAMC,WAAW,GAAGhB,KAAK,CAACC,QAAN,CAAe7E,GAAf,CAAmB2F,oBAAnB,EAAyC,UAAAb,KAAK;AAAA,aAAIC,WAAW,CAACD,KAAD,EAAQlD,QAAR,CAAf;AAAA,KAA9C,CAApB;AAEA,WAAOgD,KAAK,CAACQ,YAAN,CAAmBJ,iBAAnB,EAAsCA,iBAAiB,CAACE,KAAxD,EAA+DU,WAA/D,CAAP;AACH;;AAED,SAAOZ,iBAAP;AACH,CApFD;;ICfaa,OAAO,GAAG,SAAVA,OAAU;MACnBjE,gBAAAA;MACAoC,kBAAAA;MACA8B,eAAAA;MACAC,iBAAAA;MACA1E,gBAAAA;;kBAE2BI,QAAQ,CAAClD,SAAD;MAA3BQ,kBAAAA;MAAOF,oBAAAA;;AACf,MAAM6C,MAAM,GAAGD,QAAQ,CAACX,WAAD,CAAvB;;qBACyBS,WAAW;MAA5BkB,4BAAAA;;AAER7B,EAAAA,SAAS,CAAC;AACN,QAAMnC,SAAS,GAAGsF,uBAAuB,CAACC,UAAD,CAAzC;AAEAtC,IAAAA,MAAM,CAAC7C,OAAP,CAAekC,SAAf,CAAyBa,QAAzB,EAAmCoC,UAAnC;AACAtC,IAAAA,MAAM,CAAC7C,OAAP,CAAeuC,WAAf,CAA2BQ,QAA3B,EAAqCP,QAArC;AACAxC,IAAAA,OAAO,CAACH,YAAR,CAAqBkD,QAArB,EAA+BnD,SAA/B;AAEA,WAAO;AACHiD,MAAAA,MAAM,CAAC7C,OAAP,CAAesC,gBAAf,CAAgCS,QAAhC;AACA/C,MAAAA,OAAO,CAACgC,cAAR,CAAuBe,QAAvB;AACH,KAHD;AAIH,GAXQ,EAWN,EAXM,CAAT;AAaA,SAAO;AACHoE,IAAAA,UAAU,EAAE;AACR,UAAM/D,SAAS,GAAGQ,YAAY,CAACb,QAAD,CAA9B;AAEA,UAAMqE,WAAW,GAAGhE,SAAS,CACxBO,IADe,CACV,UAAArD,KAAK;AAAA,eAAIA,KAAJ;AAAA,OADK,CAApB;;AAGA,UAAI8G,WAAJ,EAAiB;AACb,eAAO3G,CAAC,CAACC,SAAF,CAAYuG,OAAZ,EAAqB,UAAAtG,EAAE;AAAA,iBAAIA,EAAE,CAACyC,SAAD,CAAN;AAAA,SAAvB,CAAP;AACH;;AAED,UAAMiE,UAAU,GAAG5B,SAAS,CAACvF,KAAK,CAACN,SAAN,CAAgBmD,QAAhB,CAAD,CAA5B;AAEA,aAAOtC,CAAC,CAACC,SAAF,CAAYwG,SAAZ,EAAuB,UAAAvG,EAAE;AAAA,eAAIA,EAAE,CAAC0G,UAAD,CAAN;AAAA,OAAzB,CAAP;AACH,KAdE;AAeHC,IAAAA,UAAU,EAAEpH,KAAK,CAACN,SAAN,CAAgBmD,QAAhB,KAA6BtC,CAAC,CAACqD,OAAF,CAAsB5D,KAAK,CAACN,SAAN,CAAgBmD,QAAhB,CAAtB,EACpCY,IADoC,CAC/B;AAAA,UAAOiC,MAAP;AAAA,aAAmB,CAACA,MAAM,CAAC7E,UAA3B;AAAA,KAD+B,CAftC;AAiBHwG,IAAAA,QAAQ,EAAE,kBAAC1F,aAAD,EAAwBJ,KAAxB;AAAA,aAA6DzB,OAAO,CAACwB,YAAR,CAAqBuB,QAArB,EAA+BlB,aAA/B,EAA8CJ,KAA9C,CAA7D;AAAA,KAjBP;AAkBH+F,IAAAA,WAAW,EAAE,CAAC5D,YAAY,CAACb,QAAD,EAAW,KAAX,CAAZ,CACTY,IADS,CACJ,UAAA8D,KAAK;AAAA,aAAIA,KAAJ;AAAA,KADD,CAlBX;AAoBHC,IAAAA,QAAQ,EAAE,kBAAC7F,aAAD;AAAA,aAA2B7B,OAAO,CAAC2B,YAAR,CAAqBoB,QAArB,EAA+BlB,aAA/B,CAA3B;AAAA,KApBP;AAqBH8F,IAAAA,SAAS,EAAE,mBAAC9F,aAAD;AAAA,aAA4B;AACnCC,QAAAA,QAAQ,EAAE,kBAAIA,SAAJ;AAAA,iBAAuC9B,OAAO,CAAC4B,iBAAR,CAA0BmB,QAA1B,EAAoClB,aAApC,EAAmDC,SAAnD,CAAvC;AAAA;AADyB,OAA5B;AAAA,KArBR;AAwBH8F,IAAAA,gBAAgB,EAAE;AACd,UAAI/E,MAAM,CAAC3C,KAAP,CAAa+B,WAAjB,EAA8B;AAC1B,YAAMzB,QAAQ,GAAG0E,uBAAuB,CAACrC,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,CAAyBc,QAAzB,CAAD,CAAxC;AAEA/C,QAAAA,OAAO,CAACH,YAAR,CAAqBkD,QAArB,EAA+BvC,QAA/B;AAEAC,QAAAA,CAAC,CAACC,SAAF,CAAY8B,QAAZ,EAAsB,UAAA7B,EAAE;AAAA,iBAAIA,EAAE,CAAC8E,SAAS,CAACjF,QAAD,CAAV,CAAN;AAAA,SAAxB;AACH;AACJ,KAhCE;AAiCH4E,IAAAA,SAAS,EAAE;AACP,UAAIvC,MAAM,CAAC3C,KAAP,CAAa+B,WAAjB,EAA8B;AAC1B,YAAMzB,QAAQ,GAAG0E,uBAAuB,CAACrC,MAAM,CAAC3C,KAAP,CAAa+B,WAAb,CAAyBc,QAAzB,CAAD,EAAqC,IAArC,CAAxC;AAEA/C,QAAAA,OAAO,CAACH,YAAR,CAAqBkD,QAArB,EAA+BvC,QAA/B;AAEAC,QAAAA,CAAC,CAACC,SAAF,CAAY8B,QAAZ,EAAsB,UAAA7B,EAAE;AAAA,iBAAIA,EAAE,CAAC8E,SAAS,CAACjF,QAAD,CAAV,CAAN;AAAA,SAAxB;AACH;AACJ,KAzCE;AA0CHqH,IAAAA,aAAa,EAAE,uBAAChG,aAAD,EAAwBhB,YAAxB;AAAA,aAAiDb,OAAO,CAACY,YAAR,CAAqBmC,QAArB,EAA+BlB,aAA/B,EAA8ChB,YAA9C,CAAjD;AAAA,KA1CZ;AA2CHiH,IAAAA,WAAW,EAAErH,CAAC,CAACsH,OAAF,CAAU7H,KAAK,CAACN,SAAN,CAAgBmD,QAAhB,CAAV;AA3CV,GAAP;AA6CH,CArEM;;ICTMiF,IAAI,GAAuC,SAA3CA,IAA2C;AAAA,MACpDlC,QADoD,QACpDA,QADoD;AAAA,MAEpD/C,QAFoD,QAEpDA,QAFoD;AAAA,SAIpDgD,mBAAA,CAACkC,QAAD,MAAA,EACKpC,UAAU,CAACC,QAAD,EAAW/C,QAAX,CADf,CAJoD;AAAA,CAAjD;;ICAMmF,YAAY,GAA4B,SAAxCA,YAAwC;AAAA,MAAGpC,QAAH,QAAGA,QAAH;AAAA,SACjDC,mBAAA,CAACoC,QAAD;AAAUC,IAAAA,MAAM,EAAE3F;GAAlB,EACKqD,QADL,CADiD;AAAA,CAA9C;;;;"}