{"version":3,"file":"react-form-builder.umd.production.min.js","sources":["../src/types/Form.ts","../src/components/Input.tsx","../src/components/Checkbox.tsx","../src/components/Picker.tsx","../src/stores/formStore/formStore.ts","../src/stores/configStore/configStore.ts","../src/stores/index.ts","../src/hooks/useValidate.ts","../src/hooks/useEvents.ts","../src/hooks/useBlur.ts","../src/hooks/useChange.ts","../src/utils/stateUtils.ts","../src/Form.tsx","../src/utils/renderHelpers.tsx","../src/FormProvider.tsx","../src/hooks/useForm.ts"],"sourcesContent":["import { FormState } from './FormState'\nimport { KeyValuePair } from './common'\n\nexport enum FormFieldType {\n    Input = 0,\n    Picker = 1,\n    CheckBox = 2\n}\n\ntype ValidationValue = string | number | boolean | Array<FormOption>\n\nexport type FormValidationRule = {\n    errorMessage: string,\n    validationFunction(value: ValidationValue, form: FormState): boolean\n}\n\nexport type FormOptionValue = number | string\n\nexport type FormOption = {\n    value: FormOptionValue,\n    label: string,\n    isSelected?: boolean\n}\n\nexport type FieldConfig = {\n    value?: string | number | boolean,\n    type: FormFieldType,\n    isRequired?: boolean,\n    validationRules?: Array<FormValidationRule>,\n    options?: Array<FormOption>,\n    disabled?: boolean,\n    liveParser?(value: ValidationValue): ValidationValue,\n    forceLiveValidate?: boolean\n}\n\nexport type FormConfig = KeyValuePair<FieldConfig>\n// tslint:disable-next-line:no-any\nexport type OnSuccess = (form: any) => void\nexport type OnError = (errors: Array<KeyValuePair>) => void\nexport type FormProps = {\n    formName: string\n}\nexport type OnUpdate = (form: any) => void\n\nexport interface UseFormProps extends FormProps {\n    formConfig: FormConfig,\n    onSuccess?: OnSuccess,\n    onError?: OnError,\n    onUpdate?: OnUpdate\n}\n","import React from 'react'\nimport { InputProps } from '../types'\n\n// @ts-ignore\nexport const Input: React.FunctionComponent<InputProps> = ({ component }) => component()\n","import React from 'react'\nimport { CheckBoxProps } from '../types'\n\n// @ts-ignore\nexport const CheckBox: React.FunctionComponent<CheckBoxProps> = ({ component }) => component()\n","import React from 'react'\nimport { PickerProps } from '../types'\n\n// @ts-ignore\nexport const Picker: React.FunctionComponent<PickerProps> = ({ component }) => component()\n","import { useEffect, useState } from 'react'\nimport { G } from '@codegateinc/g-utils'\nimport { FieldConfig, FormFieldType, FormOption, FormPickerState, FormState, SubscribeOnChange } from '../../types'\n\nexport type FormStoreState = {\n    [key: string]: FormState\n}\n\ntype OnChange = {\n    [key: string]: SubscribeOnChange\n}\n\ntype FormStoreOnChange = {\n    [key: string]: OnChange\n}\n\nexport const formStore = () => {\n    const [ formState, setFormState ] = useState<FormStoreState>({})\n    const [ onChangeForm, setOnChangeForm ] = useState<FormStoreOnChange>({})\n\n    return {\n        actions: {\n            setFormState: (key: string, state: FormState) => setFormState(prevState => ({\n                ...prevState,\n                [key]: state\n            })),\n            setFormValue: (formKey: string, key: string, value: string | boolean, callback?: (state: FormState) => void) => {\n                if (!formState[formKey]) {\n                    return\n                }\n\n                const newState = {\n                    ...formState,\n                    [formKey]: {\n                        ...formState[formKey],\n                        [key]: {\n                            ...formState[formKey][key],\n                            value\n                        }\n                    }\n                }\n\n                setFormState(prevState => ({\n                    ...prevState,\n                    [formKey]: {\n                        ...prevState[formKey],\n                        [key]: {\n                            ...prevState[formKey][key],\n                            value\n                        }\n                    }\n                }))\n\n                G.ifDefined(callback, fn => fn(newState[formKey]))\n\n                if (onChangeForm[formKey] && onChangeForm[formKey][key]) {\n                    onChangeForm[formKey][key](value)\n                }\n            },\n            setFormError: (formKey: string, key: string, errorMessage?: string) => formState[formKey] && setFormState(prevState => ({\n                ...prevState,\n                [formKey]: {\n                    ...prevState[formKey],\n                    [key]: {\n                        ...prevState[formKey][key],\n                        errorMessage\n                    }\n                }\n            })),\n            setFormPristine: (formKey: string, key: string, isPristine: boolean) => formState[formKey] && setFormState(prevState => ({\n                ...prevState,\n                [formKey]: {\n                    ...prevState[formKey],\n                    [key]: {\n                        ...prevState[formKey][key],\n                        isPristine\n                    }\n                }\n            })),\n            setFormOptions: (\n                formKey: string,\n                key: string,\n                newOptions: Array<FormOption>,\n                callback?: (state: FormState) => void\n            ) => {\n                if (!formState[formKey]) {\n                    return\n                }\n\n                const newState = () => {\n                    const options = newOptions\n                        .map(option => option.value)\n                    const changedOptions = (formState[formKey][key] as FormPickerState).options\n                        .map(option => ({\n                            ...option,\n                            isSelected: options.includes(option.value)\n                        }))\n\n                    return {\n                        ...formState,\n                        [formKey]: {\n                            ...formState[formKey],\n                            [key]: {\n                                ...formState[formKey][key],\n                                options: changedOptions\n                            }\n                        }\n                    }\n                }\n\n                setFormState(prevState => {\n                    const options = newOptions\n                        .map(option => option.value)\n                    const changedOptions = (prevState[formKey][key] as FormPickerState).options\n                        .map(option => ({\n                            ...option,\n                            isSelected: options.includes(option.value)\n                        }))\n\n                    if (onChangeForm[formKey] && onChangeForm[formKey][key]) {\n                        onChangeForm[formKey][key](changedOptions)\n                    }\n\n                    return {\n                        ...prevState,\n                        [formKey]: {\n                            ...prevState[formKey],\n                            [key]: {\n                                ...prevState[formKey][key],\n                                options: changedOptions\n                            }\n                        }\n                    }\n                })\n                G.ifDefined(callback, fn => fn(newState()[formKey]))\n            },\n            setFormField: (formKey: string, key: string, field: Omit<FieldConfig, 'type'>) => {\n                if (formState[formKey] && formState[formKey][key]) {\n                    setFormState(prevState => ({\n                        ...prevState,\n                        [formKey]: {\n                            ...prevState[formKey],\n                            [key]: {\n                                type: formState[formKey][key].type,\n                                ...formState[formKey][key],\n                                ...field,\n                                options: field.options || (formState[formKey][key].type === FormFieldType.Picker\n                                    ? (formState[formKey][key] as FormPickerState).options\n                                    : []\n                                )\n                            }\n                        }\n                    }))\n                }\n            },\n            getFormField: (formKey: string, key: string) => {\n                if (formState[formKey] && formState[formKey][key]) {\n                    return formState[formKey][key]\n                }\n\n                return {}\n            },\n            onFormFieldChange: (formKey: string, formFieldName: string, onChange: SubscribeOnChange) => {\n                useEffect(() => {\n                    setOnChangeForm(prevState => ({\n                        ...prevState,\n                        [formKey]: {\n                            ...prevState[formKey],\n                            [formFieldName]: onChange\n                        }\n                    }))\n                }, [formState])\n            },\n            clearFormStore: (formKey: string) => {\n                setFormState(prevState => ({\n                    ...prevState,\n                    [formKey]: {}\n                }))\n                setOnChangeForm(prevState => ({\n                    ...prevState,\n                    [formKey]: {}\n                }))\n            }\n        },\n        state: {\n            formState\n        }\n    }\n}\n","import { useState } from 'react'\nimport { FormConfig, OnUpdate } from '../../types'\n\nexport type ConfigStoreState = {\n    [key: string]: FormConfig\n}\n\nexport type ConfigOnUpdate = {\n    [key: string]: OnUpdate\n}\n\nexport const configStore = () => {\n    const [ configStore, setConfig ] = useState<ConfigStoreState>({})\n    const [ configOnUpdate, setConfigOnUpdate ] = useState<ConfigOnUpdate>({})\n\n    return {\n        actions: {\n            setConfig: (key: string, newConfig: FormConfig) => setConfig(prevState => ({\n                ...prevState,\n                [key]: newConfig\n            })),\n            clearConfigStore: (formKey: string) => setConfig(prevState => ({\n                ...prevState,\n                [formKey]: {}\n            })),\n            setOnUpdate: (key: string, onUpdate?: OnUpdate) => onUpdate && setConfigOnUpdate(prevState => ({\n                ...prevState,\n                [key]: onUpdate\n            }))\n        },\n        state: {\n            configStore,\n            configOnUpdate\n        }\n    }\n}\n","import { formStore } from './formStore'\nimport { configStore } from './configStore'\n\nexport const formBuilderStores = [\n    configStore,\n    formStore\n]\n\nexport {\n    configStore,\n    formStore\n}\n","import { useStore } from 'outstated'\nimport { G } from '@codegateinc/g-utils'\nimport { configStore, formStore } from '../stores'\nimport { FieldState, FormCheckBoxState, FormFieldType, FormInputState, FormOption, FormPickerState } from '../types'\n\nexport const useValidate = () => {\n    const form = useStore(formStore)\n    const config = useStore(configStore)\n\n    return {\n        validateField: (formName: string, key: string, value: string) => {\n            const field = config.state.configStore &&\n                config.state.configStore[formName] &&\n                config.state.configStore[formName][key]\n\n            if (field?.validationRules) {\n                const validated = field.validationRules\n                    .map(rule => rule.validationFunction(value, form.state.formState[formName])\n                        ? rule.errorMessage\n                        : undefined\n                    )\n                const [ errorMessage ] = validated\n                    .filter(value => value)\n\n                form.actions.setFormError(formName, key, errorMessage)\n            }\n        },\n        validateCheckBox: (formName: string, key: string, value: boolean) => {\n            const field = config.state.configStore &&\n                config.state.configStore[formName] &&\n                config.state.configStore[formName][key]\n\n            if (field?.validationRules) {\n                const [ rule ] = field.validationRules\n                const errorMessage = rule.validationFunction(value, form.state.formState[formName])\n                    ? rule.errorMessage\n                    : undefined\n\n                form.actions.setFormError(formName, key, errorMessage)\n            }\n        },\n        validatePicker: (formName: string, key: string, options: Array<FormOption>) => {\n            const field = config.state.configStore &&\n                config.state.configStore[formName] &&\n                config.state.configStore[formName][key]\n            const validated = field?.validationRules && field.validationRules\n                .map(rule => rule.validationFunction(options, form.state.formState[formName])\n                    ? rule.errorMessage\n                    : undefined\n                )\n            const [ errorMessage ] = validated || [undefined]\n                .filter(value => value)\n            const isAnyOptionSelected = field?.options && field.options\n                .some(option => option.isSelected)\n\n            if (field?.isRequired && isAnyOptionSelected) {\n                return form.actions.setFormError(formName, key, errorMessage)\n            }\n\n            form.actions.setFormError(formName, key, errorMessage)\n        },\n        validateForm: (formName: string, shouldUpdateStore: boolean = true) => form.state.formState[formName] ? G.toPairs<FieldState>(form.state.formState[formName])\n            .map(([key, formState]) => {\n                const configField = config.state.configStore && config.state.configStore[formName][key]\n\n                if (configField?.validationRules && formState.type === FormFieldType.Input) {\n                    const value = (formState as FormInputState).value\n\n                    if (!formState.isRequired && value === '') {\n                        return undefined\n                    }\n\n                    const validated = configField.validationRules\n                        .map(rule => rule.validationFunction(value, form.state.formState[formName])\n                            ? rule.errorMessage\n                            : undefined\n                        )\n                    const [ errorMessage ] = validated\n                        .filter(value => value)\n\n                    if (shouldUpdateStore) {\n                        form.actions.setFormError(formName, key, errorMessage)\n                    }\n\n                    return errorMessage\n                }\n\n                if (configField?.validationRules && formState.type === FormFieldType.CheckBox) {\n                    const value = (formState as FormCheckBoxState).value\n\n                    if (!formState.isRequired) {\n                        return undefined\n                    }\n\n                    const [ rule ] = configField.validationRules\n                    const errorMessage = rule.validationFunction(value, form.state.formState[formName])\n                        ? rule.errorMessage\n                        : undefined\n\n                    if (shouldUpdateStore) {\n                        form.actions.setFormError(formName, key, errorMessage)\n                    }\n\n                    return errorMessage\n                }\n\n                if (configField?.validationRules && formState.type === FormFieldType.Picker) {\n                    const options = (formState as FormPickerState).options\n\n                    if (!formState.isRequired) {\n                        return undefined\n                    }\n\n                    const validated = configField.validationRules\n                        .map(rule => rule.validationFunction(options, form.state.formState[formName])\n                            ? rule.errorMessage\n                            : undefined\n                        )\n                    const [ errorMessage ] = validated\n                        .filter(value => value)\n\n                    if (shouldUpdateStore) {\n                        form.actions.setFormError(formName, key, errorMessage)\n                    }\n\n                    return errorMessage\n                }\n            }) : []\n    }\n}\n","import { useBlur } from './useBlur'\nimport { useChange } from './useChange'\n\nexport const useEvents = () => {\n    const { onInputBlur } = useBlur()\n    const { onInputChange, onCheckboxChange, onPickerChange } = useChange()\n\n    return {\n        input: {\n            onBlur: onInputBlur,\n            onChange: onInputChange\n        },\n        checkBox: {\n            onChange: onCheckboxChange\n        },\n        picker: {\n            onChange: onPickerChange\n        }\n    }\n}\n","import { useStore } from 'outstated'\nimport { useValidate } from './useValidate'\nimport { configStore, formStore } from '../stores'\n\nexport const useBlur = () => {\n    const form = useStore(formStore)\n    const config = useStore(configStore)\n    const { validateField } = useValidate()\n\n    return {\n        onInputBlur: (formName: string, key: string, value: string) => {\n            const field = form.state.formState[formName][key]\n            const configField = config.state.configStore && config.state.configStore[formName][key]\n\n            if (field.isRequired || value !== configField?.value) {\n                form.actions.setFormPristine(formName, key, false)\n            }\n\n            validateField(formName, key, value)\n        }\n    }\n}\n","import { useStore } from 'outstated'\nimport { G } from '@codegateinc/g-utils'\nimport { useValidate } from './useValidate'\nimport { configStore, formStore } from '../stores'\nimport { FormCheckBoxState, FormInputState, FormOption, FormState } from '../types'\n\nexport const useChange = () => {\n    const { state, actions } = useStore(formStore)\n    const form = useStore(configStore)\n    const { validateField, validateCheckBox, validatePicker } = useValidate()\n\n    return {\n        onInputChange: (formName: string, key: string, value: string, callback?: (state: FormState) => void) => {\n            const field = state.formState[formName][key] as FormInputState\n            const configField = form.state.configStore &&\n                form.state.configStore[formName] &&\n                form.state.configStore[formName][key]\n\n            const parsedValue = configField?.liveParser\n                ? configField.liveParser(value)\n                : value\n\n            if (typeof parsedValue !== 'string') {\n                throw new Error('liveParser must return string on input')\n            }\n\n            if (field.errorMessage || !field.isPristine || configField.forceLiveValidate) {\n                validateField(formName, key, parsedValue)\n            }\n\n            actions.setFormValue(formName, key, parsedValue, callback)\n        },\n        onCheckboxChange: (formName: string, key: string, callback?: (state: FormState) => void) => {\n            const field = state.formState[formName][key] as FormCheckBoxState\n            const configField = form.state.configStore &&\n                form.state.configStore[formName] &&\n                form.state.configStore[formName][key]\n\n            const parsedValue = configField?.liveParser\n                ? configField.liveParser(!field.value)\n                : !field.value\n\n            if (typeof parsedValue !== 'boolean') {\n                throw new Error('liveParser must return boolean on checkbox')\n            }\n\n            if (field.isRequired && !field.isPristine || field.errorMessage) {\n                validateCheckBox(formName, key, parsedValue)\n            }\n\n            actions.setFormValue(formName, key, parsedValue, callback)\n        },\n        onPickerChange: (formName: string, key: string, options: Array<FormOption>, callback?: (state: FormState) => void) => {\n            const configField = form.state.configStore &&\n                form.state.configStore[formName] &&\n                form.state.configStore[formName][key]\n\n            const parsedValue = configField?.liveParser\n                ? configField.liveParser(options)\n                : options\n\n            if (!G.is(Array, parsedValue)) {\n                throw new Error('liveParser must return array on picker')\n            }\n\n            validatePicker(formName, key, options)\n            actions.setFormOptions(formName, key, options, callback)\n        }\n    }\n}\n","import { G } from '@codegateinc/g-utils'\nimport {\n    FieldConfig,\n    FieldState, FormCheckBoxState,\n    FormConfig,\n    FormFieldType, FormInputState, FormPickerState, FormState\n} from 'types'\n\nexport const prepareFormInitialState = (formConfig: FormConfig, clearForm: boolean = false) => {\n    const configToPairs = G.toPairs<FieldConfig>(formConfig)\n        .map(([ fieldName, config ]) => {\n            if (config?.isRequired && !config?.validationRules) {\n                throw new Error('validationRules are required if field isRequired  ')\n            }\n\n            if (config.type === FormFieldType.Input || config.type === FormFieldType.CheckBox) {\n                return [fieldName, {\n                    value: clearForm\n                        ? config.type === FormFieldType.Input ? '' : false\n                        : config.value || '',\n                    isRequired: config?.isRequired || false,\n                    isPristine: true,\n                    disabled: config?.disabled || false,\n                    type: config.type,\n                    errorMessage: undefined\n                }]\n            }\n\n            if (config.type === FormFieldType.Picker) {\n                return [fieldName, {\n                    isRequired: config?.isRequired || false,\n                    isPristine: true,\n                    disabled: config?.disabled || false,\n                    type: config.type,\n                    errorMessage: undefined,\n                    options: clearForm\n                        ? config.options?.map(option => ({\n                            ...option,\n                            isSelected: false\n                        })) || []\n                        : config.options || []\n                }]\n            }\n        }) as Array<[string, FieldState]>\n\n    return G.fromPairs(configToPairs)\n}\n\nexport const parseForm = (state: FormState) => state && G.toPairs<FieldState>(state)\n    .reduce((acc, [key, object]) => {\n        if (object.type === FormFieldType.Input || object.type === FormFieldType.CheckBox) {\n            const value = (object as FormInputState | FormCheckBoxState).value\n\n            return {\n                ...acc,\n                [key]: value\n            }\n        }\n\n        if (object.type === FormFieldType.Picker) {\n            const options = (object as FormPickerState).options\n                .filter(option => option.isSelected)\n                .map(option => option.value)\n\n            return {\n                ...acc,\n                [key]: options\n            }\n        }\n\n        return acc\n    }, {})\n","import React, { Fragment } from 'react'\nimport { renderForm } from 'utils'\nimport { FormProps } from './types'\n\nexport const Form: React.FunctionComponent<FormProps> = ({\n    children,\n    formName\n}) => (\n    <Fragment>\n        {renderForm(children, formName)}\n    </Fragment>\n)\n","import React from 'react'\nimport { G } from '@codegateinc/g-utils'\nimport { useStore } from 'outstated'\nimport { useEvents } from 'hooks/useEvents'\nimport { configStore, formStore } from 'stores'\nimport { CheckBox, Input, Picker } from 'components'\nimport {\n    FormOption,\n    InputProps,\n    PickerProps,\n    CheckBoxProps,\n    FormInputState,\n    FormPickerState,\n    FormCheckBoxState\n} from '../types'\nimport { parseForm } from './stateUtils'\n\nexport const renderForm = (\n    children: React.ReactNode,\n    formName: string\n) => {\n    if (!children) {\n        throw new Error('children are mandatory')\n    }\n\n    return React.Children.map(children, child => renderChild(child, formName))\n}\n\nconst renderChild = (child: React.ReactNode, formName: string) => {\n    if (typeof child === 'string' || typeof child === 'number' || typeof child === null) {\n        return child\n    }\n\n    const { state } = useStore(formStore)\n    const { state: { configOnUpdate } } = useStore(configStore)\n\n    // tslint:disable-next-line:no-any\n    const reactElementChild = child as React.ReactElement<any>\n\n    if (reactElementChild.type === Input) {\n        const { input } = useEvents()\n        const inputChild = child as React.ReactElement<InputProps>\n        const key = inputChild.props.formFieldName\n        const formState = state.formState[formName]\n        const inputState = formState ? formState[key] as FormInputState : undefined\n\n        return React.cloneElement<InputProps>(inputChild, {\n            ...inputChild.props,\n            component: () => inputChild.props.component({\n                value: inputState?.value || '',\n                onChangeText: text => input.onChange(formName, key, text, state => {\n                    G.ifDefined(configOnUpdate[formName], fn => fn(parseForm(state)))\n                }),\n                onBlur: () => input.onBlur(formName, key, inputState?.value || ''),\n                errorMessage: inputState?.errorMessage,\n                disabled: inputState?.disabled || false,\n                isPristine: inputState?.isPristine || true\n            })\n        })\n    }\n\n    if (reactElementChild.type === CheckBox) {\n        const { checkBox } = useEvents()\n        const checkBoxChild = child as React.ReactElement<CheckBoxProps>\n        const key = checkBoxChild.props.formFieldName\n        const formState = state.formState[formName]\n        const checkBoxState = formState ? formState[key] as FormCheckBoxState : undefined\n\n        return React.cloneElement<CheckBoxProps>(checkBoxChild, {\n            ...checkBoxChild.props,\n            component: () => checkBoxChild.props.component({\n                value: checkBoxState?.value || false,\n                onChange: () => checkBox.onChange(formName, key, state => {\n                    G.ifDefined(configOnUpdate[formName], fn => fn(parseForm(state)))\n                }),\n                errorMessage: checkBoxState?.errorMessage,\n                disabled: checkBoxState?.disabled || false,\n                isPristine: checkBoxState?.isPristine || true\n            })\n        })\n    }\n\n    if (reactElementChild.type === Picker) {\n        const { picker } = useEvents()\n        const pickerChild = child as React.ReactElement<PickerProps>\n        const key = pickerChild.props.formFieldName\n        const formState = state.formState[formName]\n        const pickerState = formState ? formState[key] as FormPickerState : undefined\n\n        return React.cloneElement<PickerProps>(pickerChild, {\n            ...pickerChild.props,\n            component: () => pickerChild.props.component({\n                onChange: (options: Array<FormOption>) => picker.onChange(formName, key, options, state => {\n                    G.ifDefined(configOnUpdate[formName], fn => fn(parseForm(state)))\n                }),\n                errorMessage: pickerState?.errorMessage,\n                disabled: pickerState?.disabled || false,\n                isPristine: pickerState?.isPristine || true,\n                options: pickerState?.options || []\n            })\n        })\n    }\n\n    const reactElementChildren = reactElementChild.props.children\n\n    if (reactElementChildren) {\n        const newChildren = React.Children.map(reactElementChildren, child => renderChild(child, formName))\n\n        return React.cloneElement(reactElementChild, reactElementChild.props, newChildren)\n    }\n\n    return reactElementChild\n}\n","import React from 'react'\nimport { Provider } from 'outstated'\nimport { formBuilderStores } from './stores'\n\nexport const FormProvider: React.FunctionComponent = ({ children }) => (\n    <Provider stores={formBuilderStores}>\n        {children}\n    </Provider>\n)\n","import { useEffect } from 'react'\nimport { useStore } from 'outstated'\nimport { G } from '@codegateinc/g-utils'\nimport { parseForm, prepareFormInitialState } from 'utils'\nimport { configStore, formStore } from 'stores'\nimport {\n    FieldState,\n    FieldConfig,\n    UseFormProps,\n    SubscribeOnChange\n} from 'types'\nimport { useValidate } from './useValidate'\n\nexport const useForm = <T>({\n    formName,\n    formConfig,\n    onError,\n    onSuccess,\n    onUpdate\n}: UseFormProps) => {\n    const { state, actions } = useStore(formStore)\n    const config = useStore(configStore)\n    const { validateForm } = useValidate()\n\n    useEffect(() => {\n        const formState = prepareFormInitialState(formConfig)\n\n        config.actions.setConfig(formName, formConfig)\n        config.actions.setOnUpdate(formName, onUpdate)\n        actions.setFormState(formName, formState)\n\n        return () => {\n            config.actions.clearConfigStore(formName)\n            actions.clearFormStore(formName)\n        }\n    }, [])\n\n    return {\n        submitForm: () => {\n            const validated = validateForm(formName)\n\n            const hasAnyError = validated\n                .some(value => value)\n\n            if (hasAnyError) {\n                return G.ifDefined(onError, fn => fn(validated))\n            }\n\n            const parsedForm = parseForm(state.formState[formName])\n\n            return G.ifDefined(onSuccess, fn => fn(parsedForm))\n        },\n        hasChanges: state.formState[formName] && G.toPairs<FieldState>(state.formState[formName])\n            .some(([key, object]) => !object.isPristine),\n        setField: (formFieldName: string, field: Omit<FieldConfig, 'type'>) => actions.setFormField(formName, formFieldName, field),\n        isFormValid: !validateForm(formName, false)\n            .some(error => error),\n        getField: (formFieldName: string) => actions.getFormField(formName, formFieldName),\n        subscribe: (formFieldName: string) => ({\n            onChange: <T>(onChange: SubscribeOnChange<T>) => actions.onFormFieldChange(formName, formFieldName, onChange)\n        }),\n        restoreToInitial: () => {\n            if (config.state.configStore) {\n                const newState = prepareFormInitialState(config.state.configStore[formName])\n\n                actions.setFormState(formName, newState)\n\n                G.ifDefined(onUpdate, fn => fn(parseForm(newState)))\n            }\n        },\n        clearForm: () => {\n            if (config.state.configStore) {\n                const newState = prepareFormInitialState(config.state.configStore[formName], true)\n\n                actions.setFormState(formName, newState)\n\n                G.ifDefined(onUpdate, fn => fn(parseForm(newState)))\n            }\n        },\n        isFormReady: G.hasKeys(state.formState[formName])\n    }\n}\n"],"names":["FormFieldType","Input","component","CheckBox","Picker","formStore","useState","formState","setFormState","onChangeForm","setOnChangeForm","actions","key","state","prevState","setFormValue","formKey","value","callback","newState","G","ifDefined","fn","setFormError","errorMessage","setFormPristine","isPristine","setFormOptions","newOptions","options","map","option","changedOptions","isSelected","includes","setFormField","field","type","getFormField","onFormFieldChange","formFieldName","onChange","useEffect","clearFormStore","configStore","setConfig","setConfigOnUpdate","newConfig","clearConfigStore","setOnUpdate","onUpdate","configOnUpdate","formBuilderStores","useValidate","form","useStore","config","validateField","formName","validationRules","rule","validationFunction","undefined","filter","validateCheckBox","validatePicker","isAnyOptionSelected","some","isRequired","validateForm","shouldUpdateStore","toPairs","configField","useEvents","onInputBlur","onInputChange","parsedValue","liveParser","Error","forceLiveValidate","onCheckboxChange","onPickerChange","is","Array","useChange","input","onBlur","checkBox","picker","prepareFormInitialState","formConfig","clearForm","configToPairs","fieldName","disabled","fromPairs","parseForm","reduce","acc","object","React","Fragment","children","Children","child","renderChild","reactElementChild","inputChild","props","inputState","cloneElement","onChangeText","text","checkBoxChild","checkBoxState","pickerChild","pickerState","reactElementChildren","newChildren","renderForm","Provider","stores","onError","onSuccess","submitForm","validated","parsedForm","hasChanges","setField","isFormValid","error","getField","subscribe","restoreToInitial","isFormReady","hasKeys"],"mappings":"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"}