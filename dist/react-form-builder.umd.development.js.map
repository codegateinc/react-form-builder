{"version":3,"file":"react-form-builder.umd.development.js","sources":["../src/components/Input.tsx","../src/components/Checkbox.tsx","../src/components/Picker.tsx","../src/types/Form.ts","../src/stores/formStore/formStore.ts","../src/stores/configStore/configStore.ts","../src/stores/index.ts","../src/hooks/useValidate.ts","../src/hooks/useBlur.ts","../src/hooks/useChange.ts","../src/hooks/useEvents.ts","../src/utils/stateUtils.ts","../src/utils/renderHelpers.tsx","../src/hooks/useForm.ts","../src/Form.tsx","../src/FormProvider.tsx"],"sourcesContent":["import React from 'react'\nimport { InputProps } from '../types'\n\n// @ts-ignore\nexport const Input: React.FunctionComponent<InputProps> = ({ component }) => component()\n","import React from 'react'\nimport { CheckBoxProps } from '../types'\n\n// @ts-ignore\nexport const CheckBox: React.FunctionComponent<CheckBoxProps> = ({ component }) => component()\n","import React from 'react'\nimport { PickerProps } from '../types'\n\n// @ts-ignore\nexport const Picker: React.FunctionComponent<PickerProps> = ({ component }) => component()\n","import { FormState } from './FormState'\nimport { KeyValuePair } from './common'\n\nexport enum FormFieldType {\n    Input = 0,\n    Picker = 1,\n    CheckBox = 2\n}\n\ntype ValidationValue = string | number | boolean | Array<FormOption>\n\nexport type FormValidationRule = {\n    errorMessage: string,\n    validationFunction(value: ValidationValue, form: FormState): boolean\n}\n\nexport type FormOptionValue = number | string\n\nexport type FormOption = {\n    value: FormOptionValue,\n    label: string,\n    isSelected?: boolean\n}\n\nexport type FieldConfig = {\n    value?: string | number | boolean,\n    type: FormFieldType,\n    isRequired?: boolean,\n    validationRules?: Array<FormValidationRule>,\n    options?: Array<FormOption>,\n    disabled?: boolean,\n    liveParser?(value: ValidationValue): ValidationValue,\n    forceLiveValidate?: boolean\n}\n\nexport type FormConfig = KeyValuePair<FieldConfig>\n// tslint:disable-next-line:no-any\nexport type OnSuccess = (form: any) => void\nexport type OnError = (errors: Array<KeyValuePair>) => void\nexport type FormProps = {\n    formName: string\n}\nexport type OnUpdate = (form: any) => void\n\nexport interface UseFormProps extends FormProps {\n    formConfig: FormConfig,\n    onSuccess?: OnSuccess,\n    onError?: OnError,\n    onUpdate?: OnUpdate\n}\n","import { useEffect, useState } from 'react'\nimport { G } from '@codegateinc/g-utils'\nimport { FieldConfig, FormFieldType, FormOption, FormPickerState, FormState, SubscribeOnChange } from '../../types'\n\nexport type FormStoreState = {\n    [key: string]: FormState\n}\n\ntype OnChange = {\n    [key: string]: SubscribeOnChange\n}\n\ntype FormStoreOnChange = {\n    [key: string]: OnChange\n}\n\nexport const formStore = () => {\n    const [ formState, setFormState ] = useState<FormStoreState>({})\n    const [ onChangeForm, setOnChangeForm ] = useState<FormStoreOnChange>({})\n\n    return {\n        actions: {\n            setFormState: (key: string, state: FormState) => setFormState(prevState => ({\n                ...prevState,\n                [key]: state\n            })),\n            setFormValue: (formKey: string, key: string, value: string | boolean, callback?: (state: FormState) => void) => {\n                if (!formState[formKey]) {\n                    return\n                }\n\n                const newState = {\n                    ...formState,\n                    [formKey]: {\n                        ...formState[formKey],\n                        [key]: {\n                            ...formState[formKey][key],\n                            value\n                        }\n                    }\n                }\n\n                setFormState(prevState => ({\n                    ...prevState,\n                    [formKey]: {\n                        ...prevState[formKey],\n                        [key]: {\n                            ...prevState[formKey][key],\n                            value\n                        }\n                    }\n                }))\n\n                G.ifDefined(callback, fn => fn(newState[formKey]))\n\n                if (onChangeForm[formKey] && onChangeForm[formKey][key]) {\n                    onChangeForm[formKey][key](value)\n                }\n            },\n            setFormError: (formKey: string, key: string, errorMessage?: string) => formState[formKey] && setFormState(prevState => ({\n                ...prevState,\n                [formKey]: {\n                    ...prevState[formKey],\n                    [key]: {\n                        ...prevState[formKey][key],\n                        errorMessage\n                    }\n                }\n            })),\n            setFormPristine: (formKey: string, key: string, isPristine: boolean) => formState[formKey] && setFormState(prevState => ({\n                ...prevState,\n                [formKey]: {\n                    ...prevState[formKey],\n                    [key]: {\n                        ...prevState[formKey][key],\n                        isPristine\n                    }\n                }\n            })),\n            setFormOptions: (\n                formKey: string,\n                key: string,\n                newOptions: Array<FormOption>,\n                callback?: (state: FormState) => void\n            ) => {\n                if (!formState[formKey]) {\n                    return\n                }\n\n                const newState = () => {\n                    const options = newOptions\n                        .map(option => option.value)\n                    const changedOptions = (formState[formKey][key] as FormPickerState).options\n                        .map(option => ({\n                            ...option,\n                            isSelected: options.includes(option.value)\n                        }))\n\n                    return {\n                        ...formState,\n                        [formKey]: {\n                            ...formState[formKey],\n                            [key]: {\n                                ...formState[formKey][key],\n                                options: changedOptions\n                            }\n                        }\n                    }\n                }\n\n                setFormState(prevState => {\n                    const options = newOptions\n                        .map(option => option.value)\n                    const changedOptions = (prevState[formKey][key] as FormPickerState).options\n                        .map(option => ({\n                            ...option,\n                            isSelected: options.includes(option.value)\n                        }))\n\n                    if (onChangeForm[formKey] && onChangeForm[formKey][key]) {\n                        onChangeForm[formKey][key](changedOptions)\n                    }\n\n                    return {\n                        ...prevState,\n                        [formKey]: {\n                            ...prevState[formKey],\n                            [key]: {\n                                ...prevState[formKey][key],\n                                options: changedOptions\n                            }\n                        }\n                    }\n                })\n                G.ifDefined(callback, fn => fn(newState()[formKey]))\n            },\n            setFormField: (formKey: string, key: string, field: Omit<FieldConfig, 'type'>) => {\n                if (formState[formKey] && formState[formKey][key]) {\n                    setFormState(prevState => ({\n                        ...prevState,\n                        [formKey]: {\n                            ...prevState[formKey],\n                            [key]: {\n                                ...formState[formKey][key],\n                                ...field,\n                                type: formState[formKey][key].type,\n                                options: field.options || (formState[formKey][key].type === FormFieldType.Picker\n                                    ? (formState[formKey][key] as FormPickerState).options\n                                    : []\n                                )\n                            }\n                        }\n                    }))\n                }\n            },\n            getFormField: (formKey: string, key: string) => {\n                if (formState[formKey] && formState[formKey][key]) {\n                    return formState[formKey][key]\n                }\n\n                return {}\n            },\n            onFormFieldChange: (formKey: string, formFieldName: string, onChange: SubscribeOnChange) => {\n                useEffect(() => {\n                    setOnChangeForm(prevState => ({\n                        ...prevState,\n                        [formKey]: {\n                            ...prevState[formKey],\n                            [formFieldName]: onChange\n                        }\n                    }))\n                }, [formState])\n            },\n            clearFormStore: (formKey: string) => {\n                setFormState(prevState => ({\n                    ...prevState,\n                    [formKey]: {}\n                }))\n                setOnChangeForm(prevState => ({\n                    ...prevState,\n                    [formKey]: {}\n                }))\n            }\n        },\n        state: {\n            formState\n        }\n    }\n}\n","import { useState } from 'react'\nimport { FormConfig, OnUpdate, FieldConfig, FormFieldType } from '../../types'\n\nexport type ConfigStoreState = {\n    [key: string]: FormConfig\n}\n\nexport type ConfigOnUpdate = {\n    [key: string]: OnUpdate\n}\n\nexport const configStore = () => {\n    const [ configStore, setConfig ] = useState<ConfigStoreState>({})\n    const [ configOnUpdate, setConfigOnUpdate ] = useState<ConfigOnUpdate>({})\n\n    return {\n        actions: {\n            setConfig: (key: string, newConfig: FormConfig) => setConfig(prevState => ({\n                ...prevState,\n                [key]: newConfig\n            })),\n            clearConfigStore: (formKey: string) => setConfig(prevState => ({\n                ...prevState,\n                [formKey]: {}\n            })),\n            setOnUpdate: (key: string, onUpdate?: OnUpdate) => onUpdate && setConfigOnUpdate(prevState => ({\n                ...prevState,\n                [key]: onUpdate\n            })),\n            setConfigFormField: (formKey: string, key: string, field: Omit<FieldConfig, 'type'>) => {\n                if (configStore[formKey] && configStore[formKey][key]) {\n                    setConfig(prevState => ({\n                        ...prevState,\n                        [formKey]: {\n                            ...prevState[formKey],\n                            [key]: {\n                                ...configStore[formKey][key],\n                                ...field,\n                                type: configStore[formKey][key].type,\n                                options: field.options || (configStore[formKey][key].type === FormFieldType.Picker\n                                    ? configStore[formKey][key].options\n                                    : []\n                                )\n                            }\n                        }\n                    }))\n                }\n            }\n        },\n        state: {\n            configStore,\n            configOnUpdate\n        }\n    }\n}\n","import { formStore } from './formStore'\nimport { configStore } from './configStore'\n\nexport const formBuilderStores = [\n    configStore,\n    formStore\n]\n\nexport {\n    configStore,\n    formStore\n}\n","import { useStore } from 'outstated'\nimport { G } from '@codegateinc/g-utils'\nimport { configStore, formStore } from '../stores'\nimport { FieldState, FormCheckBoxState, FormFieldType, FormInputState, FormOption, FormPickerState } from '../types'\n\nexport const useValidate = () => {\n    const form = useStore(formStore)\n    const config = useStore(configStore)\n\n    return {\n        validateField: (formName: string, key: string, value: string) => {\n            const field = config.state.configStore &&\n                config.state.configStore[formName] &&\n                config.state.configStore[formName][key]\n\n            if (field?.validationRules) {\n                const validated = field.validationRules\n                    .map(rule => rule.validationFunction(value, form.state.formState[formName])\n                        ? rule.errorMessage\n                        : undefined\n                    )\n                const [ errorMessage ] = validated\n                    .filter(value => value)\n\n                form.actions.setFormError(formName, key, errorMessage)\n            }\n        },\n        validateCheckBox: (formName: string, key: string, value: boolean) => {\n            const field = config.state.configStore &&\n                config.state.configStore[formName] &&\n                config.state.configStore[formName][key]\n\n            if (field?.validationRules) {\n                const [ rule ] = field.validationRules\n                const errorMessage = rule.validationFunction(value, form.state.formState[formName])\n                    ? rule.errorMessage\n                    : undefined\n\n                form.actions.setFormError(formName, key, errorMessage)\n            }\n        },\n        validatePicker: (formName: string, key: string, options: Array<FormOption>) => {\n            const field = config.state.configStore &&\n                config.state.configStore[formName] &&\n                config.state.configStore[formName][key]\n            const validated = field?.validationRules && field.validationRules\n                .map(rule => rule.validationFunction(options, form.state.formState[formName])\n                    ? rule.errorMessage\n                    : undefined\n                )\n            const [ errorMessage ] = validated || [undefined]\n                .filter(value => value)\n            const isAnyOptionSelected = field?.options && field.options\n                .some(option => option.isSelected)\n\n            if (field?.isRequired && isAnyOptionSelected) {\n                return form.actions.setFormError(formName, key, undefined)\n            }\n\n            form.actions.setFormError(formName, key, errorMessage)\n        },\n        validateForm: (formName: string, shouldUpdateStore: boolean = true) => form.state.formState[formName] ? G.toPairs<FieldState>(form.state.formState[formName])\n            .map(([key, formState]) => {\n                const configField = config.state.configStore && config.state.configStore[formName][key]\n\n                if (configField?.validationRules && formState.type === FormFieldType.Input) {\n                    const value = (formState as FormInputState).value\n\n                    if (!formState.isRequired && value === '') {\n                        return undefined\n                    }\n\n                    const validated = configField.validationRules\n                        .map(rule => rule.validationFunction(value, form.state.formState[formName])\n                            ? rule.errorMessage\n                            : undefined\n                        )\n                    const [ errorMessage ] = validated\n                        .filter(value => value)\n\n                    if (shouldUpdateStore) {\n                        form.actions.setFormError(formName, key, errorMessage)\n                    }\n\n                    return errorMessage\n                }\n\n                if (configField?.validationRules && formState.type === FormFieldType.CheckBox) {\n                    const value = (formState as FormCheckBoxState).value\n\n                    if (!formState.isRequired) {\n                        return undefined\n                    }\n\n                    const [ rule ] = configField.validationRules\n                    const errorMessage = rule.validationFunction(value, form.state.formState[formName])\n                        ? rule.errorMessage\n                        : undefined\n\n                    if (shouldUpdateStore) {\n                        form.actions.setFormError(formName, key, errorMessage)\n                    }\n\n                    return errorMessage\n                }\n\n                if (configField?.validationRules && formState.type === FormFieldType.Picker) {\n                    const options = (formState as FormPickerState).options\n\n                    if (!formState.isRequired) {\n                        return undefined\n                    }\n\n                    const validated = configField.validationRules\n                        .map(rule => rule.validationFunction(options, form.state.formState[formName])\n                            ? rule.errorMessage\n                            : undefined\n                        )\n                    const [ errorMessage ] = validated\n                        .filter(value => value)\n\n                    if (shouldUpdateStore) {\n                        form.actions.setFormError(formName, key, errorMessage)\n                    }\n\n                    return errorMessage\n                }\n            }) : []\n    }\n}\n","import { useStore } from 'outstated'\nimport { useValidate } from './useValidate'\nimport { configStore, formStore } from '../stores'\n\nexport const useBlur = () => {\n    const form = useStore(formStore)\n    const config = useStore(configStore)\n    const { validateField } = useValidate()\n\n    return {\n        onInputBlur: (formName: string, key: string, value: string) => {\n            const field = form.state.formState[formName][key]\n            const configField = config.state.configStore && config.state.configStore[formName][key]\n\n            if (field.isRequired || value !== configField?.value) {\n                form.actions.setFormPristine(formName, key, false)\n            }\n\n            validateField(formName, key, value)\n        }\n    }\n}\n","import { useStore } from 'outstated'\nimport { G } from '@codegateinc/g-utils'\nimport { useValidate } from './useValidate'\nimport { configStore, formStore } from '../stores'\nimport { FormCheckBoxState, FormInputState, FormOption, FormState } from '../types'\n\nexport const useChange = () => {\n    const { state, actions } = useStore(formStore)\n    const form = useStore(configStore)\n    const { validateField, validateCheckBox, validatePicker } = useValidate()\n\n    return {\n        onInputChange: (formName: string, key: string, value: string, callback?: (state: FormState) => void) => {\n            const field = state.formState[formName][key] as FormInputState\n            const configField = form.state.configStore &&\n                form.state.configStore[formName] &&\n                form.state.configStore[formName][key]\n\n            const parsedValue = configField?.liveParser\n                ? configField.liveParser(value)\n                : value\n\n            if (typeof parsedValue !== 'string') {\n                throw new Error('liveParser must return string on input')\n            }\n\n            const shouldValidateField = field.errorMessage || !field.isPristine || configField.forceLiveValidate\n\n            if (shouldValidateField) {\n                validateField(formName, key, parsedValue)\n            }\n\n            actions.setFormValue(formName, key, parsedValue, callback)\n        },\n        onCheckboxChange: (formName: string, key: string, callback?: (state: FormState) => void) => {\n            const field = state.formState[formName][key] as FormCheckBoxState\n            const configField = form.state.configStore &&\n                form.state.configStore[formName] &&\n                form.state.configStore[formName][key]\n\n            const parsedValue = configField?.liveParser\n                ? configField.liveParser(!field.value)\n                : !field.value\n\n            if (typeof parsedValue !== 'boolean') {\n                throw new Error('liveParser must return boolean on checkbox')\n            }\n\n            if ((field.isRequired && !field.isPristine) || field.errorMessage || configField.validationRules) {\n                validateCheckBox(formName, key, parsedValue)\n            }\n\n            actions.setFormValue(formName, key, parsedValue, callback)\n        },\n        onPickerChange: (formName: string, key: string, options: Array<FormOption>, callback?: (state: FormState) => void) => {\n            const configField = form.state.configStore &&\n                form.state.configStore[formName] &&\n                form.state.configStore[formName][key]\n            const valuedOptions = options.map(item => item.value)\n            const fullOptions = configField?.options?.map(option => ({\n                ...option,\n                isSelected: valuedOptions.includes(option.value)\n            }))\n\n            const parsedOptions = configField?.liveParser\n                ? configField.liveParser(options)\n                : options\n\n            if (!G.is(Array, parsedOptions)) {\n                throw new Error('liveParser must return array on picker')\n            }\n\n            validatePicker(formName, key, fullOptions || [])\n            actions.setFormOptions(formName, key, parsedOptions as Array<FormOption>, callback)\n        }\n    }\n}\n","import { useBlur } from './useBlur'\nimport { useChange } from './useChange'\n\nexport const useEvents = () => {\n    const { onInputBlur } = useBlur()\n    const { onInputChange, onCheckboxChange, onPickerChange } = useChange()\n\n    return {\n        input: {\n            onBlur: onInputBlur,\n            onChange: onInputChange\n        },\n        checkBox: {\n            onChange: onCheckboxChange\n        },\n        picker: {\n            onChange: onPickerChange\n        }\n    }\n}\n","import { G } from '@codegateinc/g-utils'\nimport {\n    FieldConfig,\n    FieldState,\n    FormCheckBoxState,\n    FormConfig,\n    FormFieldType,\n    FormInputState,\n    FormPickerState,\n    FormState\n} from 'types'\n\nexport const prepareFormInitialState = (formConfig: FormConfig, clearForm: boolean = false) => {\n    const configToPairs = G.toPairs<FieldConfig>(formConfig)\n        .map(([ fieldName, config ]) => {\n            if (config?.isRequired && !config?.validationRules) {\n                throw new Error('validationRules are required if field isRequired  ')\n            }\n\n            if (config.type === FormFieldType.Input) {\n                return [fieldName, {\n                    value: clearForm\n                        ? ''\n                        : config.value || '',\n                    isRequired: config?.isRequired || false,\n                    isPristine: true,\n                    disabled: config?.disabled || false,\n                    type: config.type,\n                    errorMessage: undefined\n                }]\n            }\n\n            if (config.type === FormFieldType.CheckBox) {\n                return [fieldName, {\n                    value: clearForm\n                        ? false\n                        : config.value || false,\n                    isRequired: config?.isRequired || false,\n                    isPristine: true,\n                    disabled: config?.disabled || false,\n                    type: config.type,\n                    errorMessage: undefined\n                }]\n            }\n\n            if (config.type === FormFieldType.Picker) {\n                return [fieldName, {\n                    isRequired: config?.isRequired || false,\n                    isPristine: true,\n                    disabled: config?.disabled || false,\n                    type: config.type,\n                    errorMessage: undefined,\n                    options: clearForm\n                        ? config.options?.map(option => ({\n                            ...option,\n                            isSelected: false\n                        })) || []\n                        : config.options || []\n                }]\n            }\n        }) as Array<[string, FieldState]>\n\n    return G.fromPairs(configToPairs)\n}\n\nexport const parseForm = (state: FormState) => state && G.toPairs<FieldState>(state)\n    .reduce((acc, [key, object]) => {\n        if (object.type === FormFieldType.Input || object.type === FormFieldType.CheckBox) {\n            const value = (object as FormInputState | FormCheckBoxState).value\n\n            return {\n                ...acc,\n                [key]: value\n            }\n        }\n\n        if (object.type === FormFieldType.Picker) {\n            const options = (object as FormPickerState).options\n                .filter(option => option.isSelected)\n                .map(option => option.value)\n\n            return {\n                ...acc,\n                [key]: options\n            }\n        }\n\n        return acc\n    }, {})\n","import React from 'react'\nimport { G } from '@codegateinc/g-utils'\nimport { useStore } from 'outstated'\nimport { useEvents } from 'hooks/useEvents'\nimport { configStore, formStore } from 'stores'\nimport {\n    FormOption,\n    InputProps,\n    PickerProps,\n    CheckBoxProps,\n    FormFieldType,\n    FormInputState,\n    FormPickerState,\n    FormCheckBoxState\n} from '../types'\nimport { parseForm } from './stateUtils'\nimport { FieldConfig } from 'types/Form'\n\nexport const renderForm = (\n    children: React.ReactNode,\n    formName: string\n) => {\n    if (!children) {\n        throw new Error('children are mandatory')\n    }\n\n    return React.Children.map(children, child => renderChild(child, formName))\n}\n\nconst renderChild = (child: React.ReactNode, formName: string) => {\n    if (typeof child === 'string' || typeof child === 'number' || typeof child === null) {\n        return child\n    }\n\n    const { state } = useStore(formStore)\n    const { state: { configOnUpdate, configStore: config } } = useStore(configStore)\n\n    // tslint:disable-next-line:no-any\n    const reactElementChild = child as React.ReactElement<any>\n    const form = config[formName]\n    const elType = form\n        ? (form[reactElementChild.props.formFieldName] as FieldConfig)?.type\n        : undefined\n\n    if (elType === FormFieldType.Input) {\n        const { input } = useEvents()\n        const inputChild = child as React.ReactElement<InputProps>\n        const key = inputChild.props.formFieldName\n        const formState = state.formState[formName]\n        const inputState = formState ? formState[key] as FormInputState : undefined\n\n        return React.cloneElement<InputProps>(inputChild, {\n            ...inputChild.props,\n            component: () => inputChild.props.component({\n                value: inputState?.value || '',\n                onChangeText: text => input.onChange(formName, key, text, state => {\n                    G.ifDefined(configOnUpdate[formName], fn => fn(parseForm(state)))\n                }),\n                onBlur: () => input.onBlur(formName, key, inputState?.value || ''),\n                errorMessage: inputState?.errorMessage,\n                disabled: inputState?.disabled || false,\n                isPristine: inputState?.isPristine || true\n            })\n        })\n    }\n\n    if (elType === FormFieldType.CheckBox) {\n        const { checkBox } = useEvents()\n        const checkBoxChild = child as React.ReactElement<CheckBoxProps>\n        const key = checkBoxChild.props.formFieldName\n        const formState = state.formState[formName]\n        const checkBoxState = formState ? formState[key] as FormCheckBoxState : undefined\n\n        return React.cloneElement<CheckBoxProps>(checkBoxChild, {\n            ...checkBoxChild.props,\n            component: () => checkBoxChild.props.component({\n                value: checkBoxState?.value || false,\n                onChange: () => checkBox.onChange(formName, key, state => {\n                    G.ifDefined(configOnUpdate[formName], fn => fn(parseForm(state)))\n                }),\n                errorMessage: checkBoxState?.errorMessage,\n                disabled: checkBoxState?.disabled || false,\n                isPristine: checkBoxState?.isPristine || true\n            })\n        })\n    }\n\n    if (elType === FormFieldType.Picker) {\n        const { picker } = useEvents()\n        const pickerChild = child as React.ReactElement<PickerProps>\n        const key = pickerChild.props.formFieldName\n        const formState = state.formState[formName]\n        const pickerState = formState ? formState[key] as FormPickerState : undefined\n\n        return React.cloneElement<PickerProps>(pickerChild, {\n            ...pickerChild.props,\n            component: () => pickerChild.props.component({\n                onChange: (options: Array<FormOption>) => picker.onChange(formName, key, options, state => {\n                    G.ifDefined(configOnUpdate[formName], fn => fn(parseForm(state)))\n                }),\n                errorMessage: pickerState?.errorMessage,\n                disabled: pickerState?.disabled || false,\n                isPristine: pickerState?.isPristine || true,\n                options: pickerState?.options || []\n            })\n        })\n    }\n\n    const reactElementChildren = reactElementChild.props.children\n\n    if (reactElementChildren) {\n        const newChildren = React.Children.map(reactElementChildren, child => renderChild(child, formName))\n\n        return React.cloneElement(reactElementChild, reactElementChild.props, newChildren)\n    }\n\n    return reactElementChild\n}\n","import { useEffect } from 'react'\nimport { useStore } from 'outstated'\nimport { G } from '@codegateinc/g-utils'\nimport { parseForm, prepareFormInitialState } from 'utils'\nimport { configStore, formStore } from 'stores'\nimport {\n    FieldState,\n    FieldConfig,\n    UseFormProps,\n    SubscribeOnChange\n} from 'types'\nimport { useValidate } from './useValidate'\n\nexport const useForm = <T>({\n    formName,\n    formConfig,\n    onError,\n    onSuccess,\n    onUpdate\n}: UseFormProps) => {\n    const { state, actions } = useStore(formStore)\n    const config = useStore(configStore)\n    const { validateForm } = useValidate()\n\n    useEffect(() => {\n        const formState = prepareFormInitialState(formConfig)\n\n        config.actions.setConfig(formName, formConfig)\n        config.actions.setOnUpdate(formName, onUpdate)\n        actions.setFormState(formName, formState)\n\n        return () => {\n            config.actions.clearConfigStore(formName)\n            actions.clearFormStore(formName)\n        }\n    }, [])\n\n    return {\n        submitForm: () => {\n            const validated = validateForm(formName)\n\n            const hasAnyError = validated\n                .some(value => value)\n\n            if (hasAnyError) {\n                return G.ifDefined(onError, fn => fn(validated))\n            }\n\n            const parsedForm = parseForm(state.formState[formName])\n\n            return G.ifDefined(onSuccess, fn => fn(parsedForm))\n        },\n        hasChanges: state.formState[formName] && G.toPairs<FieldState>(state.formState[formName])\n            .some(([key, object]) => !object.isPristine),\n        setField: (formFieldName: string, field: Omit<FieldConfig, 'type'>) => {\n            actions.setFormField(formName, formFieldName, field)\n            config.actions.setConfigFormField(formName, formFieldName, field)\n        },\n        isFormValid: !validateForm(formName, false)\n            .some(error => error),\n        getField: (formFieldName: string) => actions.getFormField(formName, formFieldName),\n        subscribe: (formFieldName: string) => ({\n            onChange: <T>(onChange: SubscribeOnChange<T>) => actions.onFormFieldChange(formName, formFieldName, onChange)\n        }),\n        restoreToInitial: () => {\n            if (config.state.configStore) {\n                const newState = prepareFormInitialState(config.state.configStore[formName])\n\n                actions.setFormState(formName, newState)\n\n                G.ifDefined(onUpdate, fn => fn(parseForm(newState)))\n            }\n        },\n        clearForm: () => {\n            if (config.state.configStore) {\n                const newState = prepareFormInitialState(config.state.configStore[formName], true)\n\n                actions.setFormState(formName, newState)\n\n                G.ifDefined(onUpdate, fn => fn(parseForm(newState)))\n            }\n        },\n        setFieldError: (formFieldName: string, errorMessage: string) => actions.setFormError(formName, formFieldName, errorMessage),\n        isFormReady: G.hasKeys(state.formState[formName])\n    }\n}\n","import React, { Fragment } from 'react'\nimport { renderForm } from 'utils'\nimport { FormProps } from './types'\n\nexport const Form: React.FunctionComponent<FormProps> = ({\n    children,\n    formName\n}) => (\n    <Fragment>\n        {renderForm(children, formName)}\n    </Fragment>\n)\n","import React from 'react'\nimport { Provider } from 'outstated'\nimport { formBuilderStores } from './stores'\n\nexport const FormProvider: React.FunctionComponent = ({ children }) => (\n    <Provider stores={formBuilderStores}>\n        {children}\n    </Provider>\n)\n"],"names":["Input","component","CheckBox","Picker","FormFieldType","formStore","useState","formState","setFormState","onChangeForm","setOnChangeForm","actions","key","state","prevState","setFormValue","formKey","value","callback","newState","G","ifDefined","fn","setFormError","errorMessage","setFormPristine","isPristine","setFormOptions","newOptions","options","map","option","changedOptions","isSelected","includes","setFormField","field","type","getFormField","onFormFieldChange","formFieldName","onChange","useEffect","clearFormStore","configStore","setConfig","configOnUpdate","setConfigOnUpdate","newConfig","clearConfigStore","setOnUpdate","onUpdate","setConfigFormField","formBuilderStores","useValidate","form","useStore","config","validateField","formName","validationRules","validated","rule","validationFunction","undefined","filter","validateCheckBox","validatePicker","isAnyOptionSelected","some","isRequired","validateForm","shouldUpdateStore","toPairs","configField","useBlur","onInputBlur","useChange","onInputChange","parsedValue","liveParser","Error","shouldValidateField","forceLiveValidate","onCheckboxChange","onPickerChange","valuedOptions","item","fullOptions","parsedOptions","is","Array","useEvents","input","onBlur","checkBox","picker","prepareFormInitialState","formConfig","clearForm","configToPairs","fieldName","disabled","fromPairs","parseForm","reduce","acc","object","renderForm","children","React","Children","child","renderChild","reactElementChild","elType","props","inputChild","inputState","cloneElement","onChangeText","text","checkBoxChild","checkBoxState","pickerChild","pickerState","reactElementChildren","newChildren","useForm","onError","onSuccess","submitForm","hasAnyError","parsedForm","hasChanges","setField","isFormValid","error","getField","subscribe","restoreToInitial","setFieldError","isFormReady","hasKeys","Form","Fragment","FormProvider","Provider","stores"],"mappings":"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"}